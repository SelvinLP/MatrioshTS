/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,15],$V4=[1,18],$V5=[1,19],$V6=[1,20],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[2,5,16,17,21,30,33,37,38,39,41,44,46],$Vc=[1,31],$Vd=[1,32],$Ve=[1,39],$Vf=[1,38],$Vg=[20,27],$Vh=[2,21],$Vi=[1,45],$Vj=[1,44],$Vk=[1,53],$Vl=[1,61],$Vm=[1,48],$Vn=[1,55],$Vo=[1,54],$Vp=[1,56],$Vq=[1,57],$Vr=[1,58],$Vs=[1,59],$Vt=[1,60],$Vu=[20,32],$Vv=[2,5,16,17,21,30,33,36,37,38,39,41,44,46],$Vw=[2,24],$Vx=[1,73],$Vy=[20,27,44,45],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[1,84],$VD=[1,85],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[1,92],$VL=[1,93],$VM=[1,94],$VN=[20,32,50,51,52,53,54,55,56,57,58,59,60,61,62,63],$VO=[2,47],$VP=[2,5,16,17,21,30,31,33,37,38,39,41,44,46,50,51,64,65,66,67,68],$VQ=[20,32,50,51,56,57,58,59,60,61,62,63],$VR=[20,32,50,51,52,53,56,57,58,59,60,61,62,63],$VS=[20,32,60,61,62,63],$VT=[20,44,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"LInstrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"Asignacion":8,"Impresion":9,"Ift":10,"Whilet":11,"Dowhilet":12,"Fort":13,"Types":14,"Funciones":15,"tk_let":16,"tk_id":17,"Tipodeclaracion":18,"PosibleAsignacion":19,";":20,"tk_const":21,":":22,"tk_number":23,"tk_string":24,"tk_boolean":25,"tk_void":26,"=":27,"Expresion":28,"Incydec":29,"tk_console":30,"(":31,")":32,"tk_if":33,"Cuerpo":34,"Elset":35,"tk_else":36,"tk_while":37,"tk_do":38,"tk_for":39,"E_relacional":40,"tk_type":41,"{":42,"Parametostype":43,"}":44,",":45,"tk_function":46,"E_aritmetica":47,"E_logica":48,"Factor":49,"+":50,"-":51,"*":52,"/":53,"**":54,"%":55,">":56,"<":57,">=":58,"<=":59,"==":60,"!=":61,"&&":62,"||":63,"!":64,"tk_entero":65,"tk_decimal":66,"tk_cadena":67,"tk_bool":68,"++":69,"--":70,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"tk_let",17:"tk_id",20:";",21:"tk_const",22:":",23:"tk_number",24:"tk_string",25:"tk_boolean",26:"tk_void",27:"=",30:"tk_console",31:"(",32:")",33:"tk_if",36:"tk_else",37:"tk_while",38:"tk_do",39:"tk_for",41:"tk_type",42:"{",44:"}",45:",",46:"tk_function",50:"+",51:"-",52:"*",53:"/",54:"**",55:"%",56:">",57:"<",58:">=",59:"<=",60:"==",61:"!=",62:"&&",63:"||",64:"!",65:"tk_entero",66:"tk_decimal",67:"tk_cadena",68:"tk_bool",69:"++",70:"--"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,5],[18,2],[18,2],[18,2],[18,2],[18,2],[18,0],[18,1],[19,2],[19,0],[8,4],[8,2],[9,5],[10,6],[35,2],[35,2],[35,0],[11,5],[12,7],[13,8],[14,7],[43,4],[43,5],[43,2],[43,1],[15,5],[15,4],[34,3],[34,2],[34,1],[28,3],[28,1],[28,1],[28,1],[28,1],[28,1],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,2],[47,2],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[48,3],[48,3],[48,2],[49,1],[49,1],[49,1],[49,1],[49,1],[29,2],[29,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
this.$ = [$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 23: case 29: case 30: case 46: case 47: case 48: case 49:
this.$=$$[$0];
break;
case 13:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en la Instruccion "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 14:

        this.$ = new Declaracion(TipoDato.LET, $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 15:

        this.$ = new Declaracion(TipoDato.CONST, $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 16:
this.$ =new N_Tipo(Tipo.NUMBER, $$[$0]);
break;
case 17:
this.$ =new N_Tipo(Tipo.STRING, $$[$0]);
break;
case 18:
this.$ =new N_Tipo(Tipo.BOOLEAN, $$[$0]);
break;
case 19:
this.$ =new N_Tipo(Tipo.NULL, $$[$0]);
break;
case 20:
this.$ =new N_Tipo(Tipo.TYPE, $$[$0]);
break;
case 22:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error al definir tipo "+yytext,"",this._$.first_line,this._$.first_column))
break;
case 25:

        this.$ = new Asignacion($$[$0-3], $$[$0-1], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 26:

        this.$=$$[$0-1];
    
break;
case 27:

        this.$ = new Imprimir($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 28:

        this.$ = new Ifelse($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 32:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 33:

        this.$ = new Dowhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 34:

        this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 35:

        this.$ = new Type($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 36:

        $$[$0-3].push(new N_Type($$[$0-1],$$[$0]));
        this.$=$$[$0-3];
    
break;
case 37:

        $$[$0-4].push(new N_Type($$[$0-2],$$[$0-1]));
        this.$=$$[$0-4];
    
break;
case 38:

        this.$=[new N_Type($$[$0-1],$$[$0])];
    
break;
case 39:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en los parametros type "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 40:

        this.$ = new Funcion($$[$0-3], [], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 41:

        this.$ = new Llamarfuncion($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 42:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 43:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 44:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en las llaves {} "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 45:
this.$=$$[$0-1];
break;
case 50:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en la expresion "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 51:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MAS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 52:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MENOS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 53:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MULT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 54:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 55:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.POT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 56:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 57:

        this.$ = new Aritmetica($$[$0], null, TipoAritmetico.UMENOS, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 58:

        this.$ = new Aritmetica($$[$0], null, TipoAritmetico.UMAS, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 59:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MAYORQUE, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 60:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MENORQUE, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 61:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 62:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 63:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 64:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.DIFERENCIA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 65:

        this.$ = new Logica($$[$0-2], $$[$0],TipoLogica.AND, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 66:

        this.$ = new Logica($$[$0-2], $$[$0],TipoLogica.OR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 67:

        this.$ = new Logica($$[$0], null,TipoLogica.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 68: case 69:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 70:

        this.$ = new Literal($$[$0].replace(/\"|\'/g,""), _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 71:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 72:

        this.$ = new Id($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 73:

        this.$ = new Asignacion($$[$0-1], null, TipoAritmetico.INC,_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 74:

        this.$ = new Asignacion($$[$0-1], null, TipoAritmetico.DEC, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,21:$V3,29:17,30:$V4,33:$V5,37:$V6,38:$V7,39:$V8,41:$V9,46:$Va},{1:[3]},{2:$V0,5:[1,25],6:26,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,21:$V3,29:17,30:$V4,33:$V5,37:$V6,38:$V7,39:$V8,41:$V9,46:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),{17:[1,27]},{17:[1,28]},{27:[1,29],31:[1,30],69:$Vc,70:$Vd},{20:[1,33]},{31:[1,34]},{31:[1,35]},{31:[1,36]},{2:$Ve,34:37,42:$Vf},{31:[1,40]},{17:[1,41]},{17:[1,42]},{1:[2,1]},o($Vb,[2,2]),o($Vg,$Vh,{18:43,2:$Vi,22:$Vj}),o($Vg,$Vh,{18:46,2:$Vi,22:$Vj}),{2:$Vk,17:$Vl,28:47,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{32:[1,62]},o($Vu,[2,73]),o($Vu,[2,74]),o($Vb,[2,26]),{2:$Vk,17:$Vl,28:63,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:64,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:65,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{37:[1,66]},{2:$V0,4:67,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,21:$V3,29:17,30:$V4,33:$V5,37:$V6,38:$V7,39:$V8,41:$V9,44:[1,68],46:$Va},o($Vv,[2,44]),{7:69,16:$V1,21:$V3},{27:[1,70]},{31:[1,71]},{19:72,20:$Vw,27:$Vx},{17:[1,78],23:[1,74],24:[1,75],25:[1,76],26:[1,77]},o($Vy,[2,22]),{19:79,20:$Vw,27:$Vx},{20:[1,80],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM},{2:$Vk,17:$Vl,28:95,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},o($VN,[2,46]),o($VN,$VO),o($VN,[2,48]),o($VN,[2,49]),o($VN,[2,50]),{2:$Vk,17:$Vl,28:96,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:97,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:98,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},o($VN,[2,68]),o($VN,[2,69]),o($VN,[2,70]),o($VN,[2,71]),o($VN,[2,72]),{20:[1,99]},{32:[1,100],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM},{32:[1,101],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM},{32:[1,102],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM},{31:[1,103]},{2:$V0,6:26,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,21:$V3,29:17,30:$V4,33:$V5,37:$V6,38:$V7,39:$V8,41:$V9,44:[1,104],46:$Va},o($Vv,[2,43]),{2:$Vk,17:$Vl,28:106,31:$Vm,40:105,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{42:[1,107]},{32:[1,108]},{20:[1,109]},{2:$Vk,17:$Vl,28:110,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},o($Vy,[2,16]),o($Vy,[2,17]),o($Vy,[2,18]),o($Vy,[2,19]),o($Vy,[2,20]),{20:[1,111]},o($Vb,[2,25]),{2:$Vk,17:$Vl,28:112,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:113,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:114,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:115,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:116,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:117,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:118,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:119,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:120,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:121,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:122,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:123,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:124,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{2:$Vk,17:$Vl,28:125,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},{32:[1,126],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM},o($VN,[2,57]),o($VN,[2,58]),o($VN,[2,67]),o($Vb,[2,41]),{20:[1,127]},{2:$Ve,34:128,42:$Vf},{2:$Ve,34:129,42:$Vf},{2:$Vk,17:$Vl,28:130,31:$Vm,40:50,47:49,48:51,49:52,50:$Vn,51:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt},o($Vv,[2,42]),o([50,51,52,53,54,55,56,57,58,59,60,61,62,63],$VO,{20:[1,131]}),{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM},{2:[1,134],17:[1,133],43:132},{2:$Ve,34:135,42:$Vf},o($VP,[2,14]),{20:[2,23],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM},o($VP,[2,15]),o($VQ,[2,51],{52:$VB,53:$VC,54:$VD,55:$VE}),o($VQ,[2,52],{52:$VB,53:$VC,54:$VD,55:$VE}),o($VR,[2,53],{54:$VD,55:$VE}),o($VR,[2,54],{54:$VD,55:$VE}),o($VN,[2,55]),o($VN,[2,56]),o($VS,[2,59],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE}),o($VS,[2,60],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE}),o($VS,[2,61],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE}),o($VS,[2,62],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE}),o($VS,[2,63],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI}),o($VS,[2,64],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI}),o([20,32,62,63],[2,65],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK}),o([20,32,63],[2,66],{50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL}),o($VN,[2,45]),o($Vb,[2,27]),o($Vb,[2,31],{35:136,36:[1,137]}),o($Vb,[2,32]),{32:[1,138],50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM},{17:[1,140],29:139},{20:[1,143],44:[1,141],45:[1,142]},o($VT,$Vh,{18:144,2:$Vi,22:$Vj}),o($VT,[2,39]),o($Vb,[2,40]),o($Vb,[2,28]),{2:$Ve,10:146,33:$V5,34:145,42:$Vf},{20:[1,147]},{32:[1,148]},{69:$Vc,70:$Vd},{20:[1,149]},{17:[1,150]},{17:[1,151]},o($VT,[2,38]),o($Vb,[2,29]),o($Vb,[2,30]),o($Vb,[2,33]),{2:$Ve,34:152,42:$Vf},o($Vb,[2,35]),o($VT,$Vh,{18:153,2:$Vi,22:$Vj}),{2:$Vi,18:154,20:$Vh,22:$Vj},o($Vb,[2,34]),o($VT,[2,36]),{20:[1,155]},o($VT,[2,37])],
defaultActions: {25:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const CL_Error = require('../build/Errores/L_Error');
    const CN_Error = require('../build/Errores/N_Error');
    const {TipoDato, Tipo, TipoAritmetico, TipoRelacional, TipoLogica} = require('../build/Abstracto/Retorno');
    const {Literal} = require('../build/Expresiones/Literal');
    const {Aritmetica} = require('../build/Expresiones/Aritmetica');
    const {Relacional} = require('../build/Expresiones/Relacional');
    const {Logica} = require('../build/Expresiones/Logica');
    const {Imprimir} = require('../build/Instrucciones/Imprimir');
    const {Ifelse} = require('../build/Instrucciones/Ifelse');
    const {While} = require('../build/Instrucciones/While');
    const {For} = require('../build/Instrucciones/For');
    const {Dowhile} = require('../build/Instrucciones/Dowhile');
    const {Declaracion} = require('../build/Instrucciones/Declaracion');
    const {Asignacion} = require('../build/Instrucciones/Asignacion');
    const {Statement} = require('../build/Instrucciones/Statement');
    const {Id} = require('../build/Expresiones/Id');
    const {Funcion} = require('../build/Instrucciones/Funcion');
    const {Llamarfuncion} = require('../build/Instrucciones/Llamarfuncion');
    const {Type} = require('../build/Instrucciones/Type');
    const {N_Type} = require('../build/Otros/L_Types');
    const {N_Tipo} = require('../build/Otros/N_Tipo');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Comentario de una*/
break;
case 1:/*Comentario multilinea*/
break;
case 2:return 16
break;
case 3:return 21
break;
case 4:return 24
break;
case 5:return 23
break;
case 6:return 25
break;
case 7:return 26
break;
case 8:return 33
break;
case 9:return 36
break;
case 10:return 'tk_switch'
break;
case 11:return 'tk_case'
break;
case 12:return 'tk_default'
break;
case 13:return 37
break;
case 14:return 38
break;
case 15:return 39
break;
case 16:return 'tk_continue'
break;
case 17:return 'tk_return'
break;
case 18:return 'tk_break'
break;
case 19:return 46
break;
case 20:return 30
break;
case 21:return 'graficar_ts'
break;
case 22:return 41
break;
case 23:return 60
break;
case 24:return 61
break;
case 25:return 58
break;
case 26:return 56
break;
case 27:return 59
break;
case 28:return 57 
break;
case 29:return 62
break;
case 30:return 63
break;
case 31:return 64
break;
case 32:return 69
break;
case 33:return 70
break;
case 34:return 42
break;
case 35:return 44
break;
case 36:return 20
break;
case 37:return 27
break;
case 38:return 31
break;
case 39:return 32
break;
case 40:return 45
break;
case 41:return 22
break;
case 42:return '.'
break;
case 43:return 68
break;
case 44:return 66
break;
case 45:return 65
break;
case 46:return 67
break;
case 47:return 17;
break;
case 48:return 54
break;
case 49:return 50
break;
case 50:return 51
break;
case 51:return 52
break;
case 52:return 53
break;
case 53:return 55
break;
case 54: /*se ignoran*/ 
break;
case 55:  return 5;   
break;
case 56:CL_Error.L_Errores.push(new CN_Error.N_Error("Lexico",yy_.yytext,"",yy_.yylineno,yy_.yylloc.first_column));
break;
}
},
rules: [/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:function\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:type\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:true|false\b)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[\"|\']([^\"\n]|(\\"))*[\"|\'])/,/^(?:([a-zA-Z])[a-zA-Z0-9_ñÑ]*)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}