/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,18],$V2=[1,20],$V3=[1,19],$V4=[1,22],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[2,5,20,21,26,44,53,54,58,59,60,64,65,66,68,73],$Vf=[1,42],$Vg=[1,40],$Vh=[1,41],$Vi=[1,49],$Vj=[1,48],$Vk=[25,37,39],$Vl=[2,26],$Vm=[1,58],$Vn=[1,57],$Vo=[1,67],$Vp=[1,75],$Vq=[1,61],$Vr=[1,69],$Vs=[1,68],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,80],$Vz=[25,49],$VA=[2,5,20,21,26,44,53,54,57,58,59,60,64,65,66,68,73],$VB=[2,63],$VC=[25,39],$VD=[2,29],$VE=[1,97],$VF=[25,37,39,44,45],$VG=[1,114],$VH=[1,113],$VI=[1,106],$VJ=[1,107],$VK=[1,108],$VL=[1,109],$VM=[1,110],$VN=[1,111],$VO=[1,112],$VP=[1,115],$VQ=[1,116],$VR=[1,117],$VS=[1,118],$VT=[1,119],$VU=[1,120],$VV=[25,27,33,35,38,44,45,49,78,79,80,81,82,83,84,85,86,87,88,89,90],$VW=[2,85],$VX=[2,36],$VY=[1,149],$VZ=[25,27,33,35,37,38,39,44,45,46,49,78,79,80,81,82,83,84,85,86,87,88,89,90],$V_=[25,27,33,35,38,44,45,49,78,79,80,85,86,87,88,89,90],$V$=[25,27,33,35,38,44,45,49,78,79,80,81,82,85,86,87,88,89,90],$V01=[25,27,38,44,45,49,78,87,88,89,90],$V11=[25,44,45],$V21=[2,5,20,21,26,44,48,53,54,58,59,60,64,65,66,68,73,79,80,91,92,93,94,95],$V31=[38,45],$V41=[44,45],$V51=[2,20,21,26,53,54,58,59,60,64,65,66,68,73],$V61=[2,74],$V71=[2,72],$V81=[2,73],$V91=[2,71];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"LInstrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"Asignacion":8,"Impresion":9,"Ift":10,"Whilet":11,"Dowhilet":12,"Fort":13,"Forint":14,"Foroft":15,"BreakyContinue":16,"Types":17,"Switcht":18,"Funciones":19,"tk_let":20,"tk_id":21,"Tipodeclaracion":22,"Posiblearray":23,"PosibleAsignacion":24,";":25,"tk_const":26,":":27,"tk_number":28,"tk_string":29,"tk_boolean":30,"tk_void":31,"tk_array":32,"<":33,"TipoDato":34,">":35,"arrayllaves":36,"[":37,"]":38,"=":39,"Expresion":40,"Parametros":41,"{":42,"ParametrosTypevalor":43,"}":44,",":45,".":46,"tk_push":47,"(":48,")":49,"tk_pop":50,"Direccionarray":51,"Incydec":52,"tk_console":53,"tk_if":54,"Cuerpo":55,"Elset":56,"tk_else":57,"tk_while":58,"tk_do":59,"tk_for":60,"E_relacional":61,"tk_in":62,"tk_of":63,"tk_break":64,"tk_continue":65,"tk_type":66,"Parametostype":67,"tk_switch":68,"Casos":69,"Posibledefault":70,"tk_case":71,"tk_default":72,"tk_function":73,"OpeTernario":74,"E_aritmetica":75,"E_logica":76,"Factor":77,"?":78,"+":79,"-":80,"*":81,"/":82,"**":83,"%":84,">=":85,"<=":86,"==":87,"!=":88,"&&":89,"||":90,"!":91,"tk_entero":92,"tk_decimal":93,"tk_cadena":94,"tk_bool":95,"PosibleDireccionArray":96,"tk_length":97,"++":98,"--":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"tk_let",21:"tk_id",25:";",26:"tk_const",27:":",28:"tk_number",29:"tk_string",30:"tk_boolean",31:"tk_void",32:"tk_array",33:"<",35:">",37:"[",38:"]",39:"=",42:"{",44:"}",45:",",46:".",47:"tk_push",48:"(",49:")",50:"tk_pop",53:"tk_console",54:"tk_if",57:"tk_else",58:"tk_while",59:"tk_do",60:"tk_for",62:"tk_in",63:"tk_of",64:"tk_break",65:"tk_continue",66:"tk_type",68:"tk_switch",71:"tk_case",72:"tk_default",73:"tk_function",78:"?",79:"+",80:"-",81:"*",82:"/",83:"**",84:"%",85:">=",86:"<=",87:"==",88:"!=",89:"&&",90:"||",91:"!",92:"tk_entero",93:"tk_decimal",94:"tk_cadena",95:"tk_bool",97:"tk_length",98:"++",99:"--"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,6],[7,6],[22,2],[22,2],[22,2],[22,2],[22,2],[22,5],[22,0],[22,1],[23,1],[23,0],[36,3],[36,2],[24,2],[24,4],[24,4],[24,3],[24,0],[41,3],[41,1],[43,5],[43,3],[8,4],[8,7],[8,6],[8,6],[8,5],[8,8],[8,7],[8,2],[51,4],[51,3],[9,5],[10,6],[56,2],[56,2],[56,0],[11,5],[12,7],[13,8],[14,8],[14,8],[15,8],[15,8],[16,2],[16,2],[17,7],[67,4],[67,5],[67,2],[67,1],[18,8],[69,7],[69,6],[69,6],[69,5],[70,3],[70,0],[19,5],[19,4],[55,3],[55,2],[55,1],[40,3],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[74,5],[75,3],[75,3],[75,3],[75,3],[75,3],[75,3],[75,2],[75,2],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[76,3],[76,3],[76,2],[77,1],[77,1],[77,1],[77,1],[77,1],[77,4],[77,2],[96,1],[96,0],[52,2],[52,2],[34,1],[34,1],[34,1],[34,1],[34,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
this.$ = [$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 28: case 53: case 54: case 83: case 84: case 85: case 86: case 87: case 114:
this.$=$$[$0];
break;
case 17:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en la Instruccion "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 18:

        this.$ = new Declaracion(TipoDato.LET, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 19:

        this.$ = new Declaracion(TipoDato.CONST, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 20:
this.$ =new N_Tipo(Tipo.NUMBER, $$[$0]);
break;
case 21:
this.$ =new N_Tipo(Tipo.STRING, $$[$0]);
break;
case 22:
this.$ =new N_Tipo(Tipo.BOOLEAN, $$[$0]);
break;
case 23:
this.$ =new N_Tipo(Tipo.NULL, $$[$0]);
break;
case 24:
this.$ =new N_Tipo(Tipo.TYPE, $$[$0]);
break;
case 25:
this.$ =new N_Tipo(Tipo.ARRAY, $$[$0-1]);
break;
case 27:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error al definir tipo "+yytext,"",this._$.first_line,this._$.first_column))
break;
case 30:

        let valor=new L_Array(null,$$[$0-2]);
        this.$=[valor];
    
break;
case 31:

        this.$=[new L_Array(null,null)];
    
break;
case 32:
this.$=new N_Declaracion($$[$0], null, null)
break;
case 33:
this.$=new N_Declaracion(null, $$[$0-1], null)
break;
case 34:
this.$=new N_Declaracion(null, null, $$[$0-1])
break;
case 35:
this.$=new N_Declaracion(null, null, null)
break;
case 37:

        $$[$0-2].push($$[$0]);
        this.$=$$[$0-2];
    
break;
case 38:

        this.$=[$$[$0]];
    
break;
case 39:

        $$[$0-4].push(new N_Parametros($$[$0-2],$$[$0]));
        this.$=$$[$0-4];
    
break;
case 40:

        this.$=[new N_Parametros($$[$0-2],$$[$0])];
    
break;
case 41:

        this.$ = new Asignacion($$[$0-3], $$[$0-1], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 42:

        this.$ = new AsignacionArray($$[$0-6], $$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 43:

        this.$ = new AsignacionArray($$[$0-5], $$[$0-3], null, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 44:

        this.$ = new AsignacionArray($$[$0-5], $$[$0-4], "", _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 45:

        this.$ = new AsignacionArray($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 46:

        this.$ = new pushpopcondireccion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 47:

        this.$ = new pushpopcondireccion($$[$0-6], $$[$0-5], $$[$0-3], null, _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 48:

        this.$=$$[$0-1];
    
break;
case 49:

        $$[$0-3].push($$[$0-1]);
        this.$=$$[$0-3];
    
break;
case 50:

        this.$=[$$[$0-1]];
    
break;
case 51:

        this.$ = new Imprimir($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 52:

        this.$ = new Ifelse($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 56:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 57:

        this.$ = new Dowhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 58:

        this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 59: case 60:

        this.$ = new Forin(TipoDato.LET, $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 61: case 62:

        this.$ = new Forof(TipoDato.LET, $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 63: case 64:
this.$=new BreakContinue($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 65:

        this.$ = new Type($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 66:

        $$[$0-3].push(new N_Type($$[$0-1],$$[$0]));
        this.$=$$[$0-3];
    
break;
case 67:

        $$[$0-4].push(new N_Type($$[$0-2],$$[$0-1]));
        this.$=$$[$0-4];
    
break;
case 68:

        this.$=[new N_Type($$[$0-1],$$[$0])];
    
break;
case 69:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en los parametros type "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 70:

        this.$= new SwitchCase($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 71:

        $$[$0-6].push(new Case($$[$0-4],$$[$0-2]));
        this.$=$$[$0-6];
    
break;
case 72:

        $$[$0-5].push(new Case($$[$0-3],new Array()));
        this.$=$$[$0-5];
    
break;
case 73:

        this.$=[new Case($$[$0-4],$$[$0-2])];
    
break;
case 74:

        this.$=[new Case($$[$0-3],new Array())];
    
break;
case 75:

        this.$=$$[$0];
    
break;
case 77:

        this.$ = new Funcion($$[$0-3], [], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 78:

        this.$ = new Llamarfuncion($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 79:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 80:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 81:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en las llaves {} "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 82:
this.$=$$[$0-1];
break;
case 88:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en la expresion "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 89:

        this.$ = new Opeternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 90:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MAS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 91:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MENOS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 92:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MULT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 93:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 94:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.POT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 95:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 96:

        this.$ = new Aritmetica($$[$0], null, TipoAritmetico.UMENOS, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 97:

        this.$ = new Aritmetica($$[$0], null, TipoAritmetico.UMAS, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 98:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MAYORQUE, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 99:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MENORQUE, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 100:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 101:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 102:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 103:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.DIFERENCIA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 104:

        this.$ = new Logica($$[$0-2], $$[$0],TipoLogica.AND, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 105:

        this.$ = new Logica($$[$0-2], $$[$0],TipoLogica.OR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 106:

        this.$ = new Logica($$[$0], null,TipoLogica.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 107: case 108:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 109:

        this.$ = new Literal($$[$0].replace(/\"|\'/g,""), _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 110:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 111:

        this.$ = new Id($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 112:

        this.$ = new AsignacionArrayExp($$[$0-3], $$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 113:

        this.$ = new Obtenervalorarray($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 116:

        this.$ = new Asignacion($$[$0-1], null, TipoAritmetico.INC,_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 117:

        this.$ = new Asignacion($$[$0-1], null, TipoAritmetico.DEC, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 118:
this.$ = "number";
break;
case 119:
this.$ = "string";
break;
case 120:
this.$ = "boolean";
break;
case 121:
this.$ = "void";
break;
case 122:
this.$ = $$[$0];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,21:$V2,26:$V3,52:21,53:$V4,54:$V5,58:$V6,59:$V7,60:$V8,64:$V9,65:$Va,66:$Vb,68:$Vc,73:$Vd},{1:[3]},{2:$V0,5:[1,32],6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,21:$V2,26:$V3,52:21,53:$V4,54:$V5,58:$V6,59:$V7,60:$V8,64:$V9,65:$Va,66:$Vb,68:$Vc,73:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),o($Ve,[2,16]),o($Ve,[2,17]),{21:[1,34]},{21:[1,35]},{37:$Vf,39:[1,36],46:[1,37],48:[1,39],51:38,98:$Vg,99:$Vh},{25:[1,43]},{48:[1,44]},{48:[1,45]},{48:[1,46]},{2:$Vi,42:$Vj,55:47},{48:[1,50]},{25:[1,51]},{25:[1,52]},{21:[1,53]},{48:[1,54]},{21:[1,55]},{1:[2,1]},o($Ve,[2,2]),o($Vk,$Vl,{22:56,2:$Vm,27:$Vn}),o($Vk,$Vl,{22:59,2:$Vm,27:$Vn}),{2:$Vo,21:$Vp,40:60,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{47:[1,76],50:[1,77]},{37:$Vy,39:[1,78],46:[1,79]},{49:[1,81]},o($Vz,[2,116]),o($Vz,[2,117]),{2:$Vo,21:$Vp,40:82,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},o($Ve,[2,48]),{2:$Vo,21:$Vp,40:83,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:84,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:85,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{58:[1,86]},{2:$V0,4:87,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,21:$V2,26:$V3,44:[1,88],52:21,53:$V4,54:$V5,58:$V6,59:$V7,60:$V8,64:$V9,65:$Va,66:$Vb,68:$Vc,73:$Vd},o($VA,[2,81]),{7:89,20:[1,90],26:[1,91]},o($Ve,$VB),o($Ve,[2,64]),{39:[1,92]},{2:$Vo,21:$Vp,40:93,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{48:[1,94]},o($VC,$VD,{23:95,36:96,37:$VE}),{21:[1,102],28:[1,98],29:[1,99],30:[1,100],31:[1,101],32:[1,103]},o($VF,[2,27]),o($VC,$VD,{36:96,23:104,37:$VE}),{25:[1,105],33:$VG,35:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},{2:$Vo,21:$Vp,40:121,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},o($VV,[2,83]),o($VV,[2,84]),o($VV,$VW),o($VV,[2,86]),o($VV,[2,87]),o($VV,[2,88]),{2:$Vo,21:$Vp,40:122,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:123,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:124,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},o($VV,[2,107]),o($VV,[2,108]),o($VV,[2,109]),o($VV,[2,110]),o($VV,[2,111],{96:125,51:126,37:$Vf,46:[2,115]}),{48:[1,127]},{48:[1,128]},{2:$Vo,21:$Vp,37:[1,129],40:130,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{47:[1,131],50:[1,132]},{2:$Vo,21:$Vp,40:133,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{25:[1,134]},{33:$VG,35:$VH,38:[1,135],78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},{33:$VG,35:$VH,49:[1,136],78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},{33:$VG,35:$VH,49:[1,137],78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},{33:$VG,35:$VH,49:[1,138],78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},{48:[1,139]},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,21:$V2,26:$V3,44:[1,140],52:21,53:$V4,54:$V5,58:$V6,59:$V7,60:$V8,64:$V9,65:$Va,66:$Vb,68:$Vc,73:$Vd},o($VA,[2,80]),{2:$Vo,21:$Vp,40:142,48:$Vq,61:141,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{21:[1,143]},{21:[1,144]},{42:[1,145]},{33:$VG,35:$VH,49:[1,146],78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},{49:[1,147]},{24:148,25:$VX,39:$VY},o($VC,[2,28],{37:[1,150]}),{38:[1,151]},o($VF,[2,20]),o($VF,[2,21]),o($VF,[2,22]),o($VF,[2,23]),o($VF,[2,24]),{33:[1,152]},{24:153,25:$VX,39:$VY},o($Ve,[2,41]),{2:$Vo,21:$Vp,40:154,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:155,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:156,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:157,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:158,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:159,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:160,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:161,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:162,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:163,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:164,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:165,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:166,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:167,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$Vo,21:$Vp,40:168,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{33:$VG,35:$VH,49:[1,169],78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},o($VV,[2,96]),o($VV,[2,97]),o($VV,[2,106]),{46:[1,170]},o($VV,[2,113],{37:$Vy,46:[2,114]}),{2:$Vo,21:$Vp,40:171,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{49:[1,172]},{38:[1,173]},{25:[1,174],33:$VG,35:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},{48:[1,175]},{48:[1,176]},{33:$VG,35:$VH,38:[1,177],78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},o($Ve,[2,78]),o($VZ,[2,50]),{25:[1,178]},{2:$Vi,42:$Vj,55:179},{2:$Vi,42:$Vj,55:180},{2:$Vo,21:$Vp,40:181,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},o($VA,[2,79]),o([33,35,78,79,80,81,82,83,84,85,86,87,88,89,90],$VW,{25:[1,182]}),{33:$VG,35:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},o($Vk,$Vl,{22:56,2:$Vm,27:$Vn,62:[1,183],63:[1,184]}),o($Vk,$Vl,{22:59,2:$Vm,27:$Vn,62:[1,185],63:[1,186]}),{2:[1,189],21:[1,188],67:187},{42:[1,190]},{2:$Vi,42:$Vj,55:191},{25:[1,192]},{2:$Vo,21:$Vp,37:[1,194],40:193,42:[1,195],48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{38:[1,196]},o($Vk,[2,31]),{21:[1,202],28:[1,198],29:[1,199],30:[1,200],31:[1,201],34:197},{25:[1,203]},{27:[1,204],33:$VG,35:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},o($V_,[2,90],{81:$VL,82:$VM,83:$VN,84:$VO}),o($V_,[2,91],{81:$VL,82:$VM,83:$VN,84:$VO}),o($V$,[2,92],{83:$VN,84:$VO}),o($V$,[2,93],{83:$VN,84:$VO}),o($VV,[2,94]),o($VV,[2,95]),o($V01,[2,98],{79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($V01,[2,99],{79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($V01,[2,100],{79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($V01,[2,101],{79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($V01,[2,102],{33:$VG,35:$VH,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ}),o($V01,[2,103],{33:$VG,35:$VH,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ}),o([25,27,38,44,45,49,78,89,90],[2,104],{33:$VG,35:$VH,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS}),o([25,27,38,44,45,49,78,90],[2,105],{33:$VG,35:$VH,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT}),o($VV,[2,82]),{97:[1,205]},{33:$VG,35:$VH,49:[1,206],78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},{25:[1,207]},{25:[1,208]},o($Ve,[2,45]),{2:$Vo,21:$Vp,40:209,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{49:[1,210]},o($VZ,[2,49]),o($Ve,[2,51]),o($Ve,[2,55],{56:211,57:[1,212]}),o($Ve,[2,56]),{33:$VG,35:$VH,49:[1,213],78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},{21:[1,215],52:214},{21:[1,216]},{21:[1,217]},{21:[1,218]},{21:[1,219]},{25:[1,222],44:[1,220],45:[1,221]},o($V11,$Vl,{22:223,2:$Vm,27:$Vn}),o($V11,[2,69]),{69:224,71:[1,225]},o($Ve,[2,77]),o($V21,[2,18]),{25:[2,32],33:$VG,35:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},{2:$Vo,21:$Vp,38:[1,227],40:228,41:226,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{21:[1,230],43:229},o($Vk,[2,30]),{35:[1,231]},{35:[2,118]},{35:[2,119]},{35:[2,120]},{35:[2,121]},{35:[2,122]},o($V21,[2,19]),{2:$Vo,21:$Vp,40:232,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},o($VV,[2,112]),{25:[1,233]},o($Ve,[2,43]),o($Ve,[2,44]),{33:$VG,35:$VH,49:[1,234],78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},{25:[1,235]},o($Ve,[2,52]),{2:$Vi,10:237,42:$Vj,54:$V5,55:236},{25:[1,238]},{49:[1,239]},{98:$Vg,99:$Vh},{49:[1,240]},{49:[1,241]},{49:[1,242]},{49:[1,243]},{25:[1,244]},{21:[1,245]},{21:[1,246]},o($V11,[2,68]),{44:[2,76],70:247,71:[1,248],72:[1,249]},{2:$Vo,21:$Vp,40:250,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{38:[1,251],45:[1,252]},{25:[2,35]},o($V31,[2,38],{33:$VG,35:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU}),{44:[1,253],45:[1,254]},{27:[1,255]},o($VF,[2,25]),o([25,27,38,44,45,49,78],[2,89],{33:$VG,35:$VH,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU}),o($Ve,[2,42]),{25:[1,256]},o($Ve,[2,47]),o($Ve,[2,53]),o($Ve,[2,54]),o($Ve,[2,57]),{2:$Vi,42:$Vj,55:257},{2:$Vi,42:$Vj,55:258},{2:$Vi,42:$Vj,55:259},{2:$Vi,42:$Vj,55:260},{2:$Vi,42:$Vj,55:261},o($Ve,[2,65]),o($V11,$Vl,{22:262,2:$Vm,27:$Vn}),{2:$Vm,22:263,25:$Vl,27:$Vn},{44:[1,264]},{2:$Vo,21:$Vp,40:265,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{27:[1,266]},{27:[1,267],33:$VG,35:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},{25:[2,33]},{2:$Vo,21:$Vp,40:268,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{25:[2,34]},{21:[1,269]},{2:$Vo,21:$Vp,40:270,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},o($Ve,[2,46]),o($Ve,[2,58]),o($Ve,[2,59]),o($Ve,[2,61]),o($Ve,[2,60]),o($Ve,[2,62]),o($V11,[2,66]),{25:[1,271]},o($Ve,[2,70]),{27:[1,272],33:$VG,35:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU},{2:$V0,4:273,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,21:$V2,26:$V3,52:21,53:$V4,54:$V5,58:$V6,59:$V7,60:$V8,64:$V9,65:$Va,66:$Vb,68:$Vc,73:$Vd},{2:$V0,4:274,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,21:$V2,26:$V3,52:21,53:$V4,54:$V5,58:$V6,59:$V7,60:$V8,64:[1,275],65:$Va,66:$Vb,68:$Vc,73:$Vd},o($V31,[2,37],{33:$VG,35:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU}),{27:[1,276]},o($V41,[2,40],{33:$VG,35:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU}),o($V11,[2,67]),{2:$V0,4:277,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,21:$V2,26:$V3,52:21,53:$V4,54:$V5,58:$V6,59:$V7,60:$V8,64:[1,278],65:$Va,66:$Vb,68:$Vc,73:$Vd},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,21:$V2,26:$V3,44:[2,75],52:21,53:$V4,54:$V5,58:$V6,59:$V7,60:$V8,64:$V9,65:$Va,66:$Vb,68:$Vc,73:$Vd},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,21:$V2,26:$V3,52:21,53:$V4,54:$V5,58:$V6,59:$V7,60:$V8,64:[1,279],65:$Va,66:$Vb,68:$Vc,73:$Vd},{25:[1,280]},{2:$Vo,21:$Vp,40:281,48:$Vq,61:64,74:62,75:63,76:65,77:66,79:$Vr,80:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V1,21:$V2,26:$V3,52:21,53:$V4,54:$V5,58:$V6,59:$V7,60:$V8,64:[1,282],65:$Va,66:$Vb,68:$Vc,73:$Vd},{25:[1,283]},{25:[1,284]},o($V51,$VB,{44:$V61,71:$V61,72:$V61}),o($V41,[2,39],{33:$VG,35:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU}),{25:[1,285]},o($V51,$VB,{44:$V71,71:$V71,72:$V71}),o($V51,$VB,{44:$V81,71:$V81,72:$V81}),o($V51,$VB,{44:$V91,71:$V91,72:$V91})],
defaultActions: {32:[2,1],198:[2,118],199:[2,119],200:[2,120],201:[2,121],202:[2,122],227:[2,35],251:[2,33],253:[2,34]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const CL_Error = require('../build/Errores/L_Error');
    const CN_Error = require('../build/Errores/N_Error');
    const {TipoDato, Tipo, TipoAritmetico, TipoRelacional, TipoLogica} = require('../build/Abstracto/Retorno');
    const {Literal} = require('../build/Expresiones/Literal');
    const {Aritmetica} = require('../build/Expresiones/Aritmetica');
    const {Relacional} = require('../build/Expresiones/Relacional');
    const {Logica} = require('../build/Expresiones/Logica');
    const {Opeternario} = require('../build/Expresiones/Opeternario');
    const {Imprimir} = require('../build/Instrucciones/Imprimir');
    const {Ifelse} = require('../build/Instrucciones/Ifelse');
    const {While} = require('../build/Instrucciones/While');
    const {For} = require('../build/Instrucciones/For/For');
    const {Forin} = require('../build/Instrucciones/For/Forin');
    const {Forof} = require('../build/Instrucciones/For/Forof');
    const {Dowhile} = require('../build/Instrucciones/Dowhile');
    const {Declaracion, N_Declaracion, N_Parametros} = require('../build/Instrucciones/Declaracion');
    const {Asignacion} = require('../build/Instrucciones/Asignacion');
    const {Statement} = require('../build/Instrucciones/Statement');
    const {Id} = require('../build/Expresiones/Id');
    const {Funcion} = require('../build/Instrucciones/Funcion');
    const {Llamarfuncion} = require('../build/Instrucciones/Llamarfuncion');
    const {Type} = require('../build/Instrucciones/Type');
    const {N_Type} = require('../build/Otros/L_Types');
    const {N_Tipo} = require('../build/Otros/N_Tipo');
    const {L_Array} = require('../build/Instrucciones/Array');
    const {AsignacionArray, AsignacionArrayExp, Obtenervalorarray, pushpopcondireccion} = require('../build/Instrucciones/AsignacionArray');
    const {SwitchCase, Case} = require('../build/Instrucciones/SwitchCase');
    const {BreakContinue} = require('../build/Instrucciones/BreakContinue');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Comentario de una*/
break;
case 1:/*Comentario multilinea*/
break;
case 2:return 20
break;
case 3:return 26
break;
case 4:return 29
break;
case 5:return 28
break;
case 6:return 30
break;
case 7:return 31
break;
case 8:return 54
break;
case 9:return 57
break;
case 10:return 68
break;
case 11:return 71
break;
case 12:return 72
break;
case 13:return 58
break;
case 14:return 59
break;
case 15:return 60
break;
case 16:return 65
break;
case 17:return 'tk_return'
break;
case 18:return 64
break;
case 19:return 73
break;
case 20:return 53
break;
case 21:return 'graficar_ts'
break;
case 22:return 66
break;
case 23:return 32
break;
case 24:return 47
break;
case 25:return 50
break;
case 26:return 97
break;
case 27:return 62
break;
case 28:return 63
break;
case 29:return 87
break;
case 30:return 88
break;
case 31:return 85
break;
case 32:return 35
break;
case 33:return 86
break;
case 34:return 33 
break;
case 35:return 89
break;
case 36:return 90
break;
case 37:return 91
break;
case 38:return 98
break;
case 39:return 99
break;
case 40:return 42
break;
case 41:return 44
break;
case 42:return 25
break;
case 43:return 39
break;
case 44:return 48
break;
case 45:return 49
break;
case 46:return 45
break;
case 47:return 27
break;
case 48:return 46
break;
case 49:return 37
break;
case 50:return 38
break;
case 51:return 78
break;
case 52:return 95
break;
case 53:return 93
break;
case 54:return 92
break;
case 55:return 94
break;
case 56:return 21;
break;
case 57:return 83
break;
case 58:return 79
break;
case 59:return 80
break;
case 60:return 81
break;
case 61:return 82
break;
case 62:return 84
break;
case 63: /*se ignoran*/ 
break;
case 64:  return 5;   
break;
case 65:CL_Error.L_Errores.push(new CN_Error.N_Error("Lexico",yy_.yytext,"",yy_.yylineno,yy_.yylloc.first_column));
break;
}
},
rules: [/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:function\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:true|false\b)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[\"|\']([^\"\n]|(\\"))*[\"|\'])/,/^(?:([a-zA-Z])[a-zA-Z0-9_ñÑ]*)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}