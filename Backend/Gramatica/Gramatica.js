/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,19],$V2=[1,21],$V3=[1,20],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[2,5,21,22,27,45,54,55,59,60,61,65,66,67,69,74,107],$Vg=[1,44],$Vh=[1,42],$Vi=[1,43],$Vj=[1,51],$Vk=[1,50],$Vl=[1,67],$Vm=[1,75],$Vn=[1,60],$Vo=[1,69],$Vp=[1,68],$Vq=[1,70],$Vr=[1,71],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[26,38,40],$Vw=[2,27],$Vx=[1,78],$Vy=[1,77],$Vz=[1,85],$VA=[2,81],$VB=[26,50],$VC=[2,5,21,22,27,45,54,55,58,59,60,61,65,66,67,69,74,107],$VD=[2,64],$VE=[1,111],$VF=[1,110],$VG=[1,103],$VH=[1,104],$VI=[1,105],$VJ=[1,106],$VK=[1,107],$VL=[1,108],$VM=[1,109],$VN=[1,112],$VO=[1,113],$VP=[1,114],$VQ=[1,115],$VR=[1,116],$VS=[1,117],$VT=[26,28,34,36,39,45,46,50,85,86,87,88,89,90,91,92,93,94,95,96,97],$VU=[2,96],$VV=[26,40],$VW=[2,30],$VX=[1,127],$VY=[26,38,40,45,46],$VZ=[1,144],$V_=[39,46,50],$V$=[2,37],$V01=[1,178],$V11=[26,28,34,36,38,39,40,45,46,47,50,85,86,87,88,89,90,91,92,93,94,95,96,97],$V21=[26,28,34,36,39,45,46,50,85,86,87,92,93,94,95,96,97],$V31=[26,28,34,36,39,45,46,50,85,86,87,88,89,92,93,94,95,96,97],$V41=[26,28,39,45,46,50,85,94,95,96,97],$V51=[1,220],$V61=[1,216],$V71=[1,217],$V81=[1,218],$V91=[1,219],$Va1=[26,45,46],$Vb1=[2,5,21,22,27,45,49,54,55,59,60,61,65,66,67,69,74,86,87,98,99,100,101,102,107],$Vc1=[36,43,46,50],$Vd1=[1,272],$Ve1=[2,87],$Vf1=[45,46],$Vg1=[2,21,22,27,54,55,59,60,61,65,66,67,69,74,107],$Vh1=[2,75],$Vi1=[2,73],$Vj1=[2,74],$Vk1=[2,72];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"LInstrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"Asignacion":8,"Impresion":9,"Ift":10,"Whilet":11,"Dowhilet":12,"Fort":13,"Forint":14,"Foroft":15,"BreakyContinue":16,"Types":17,"Switcht":18,"Funciones":19,"Returnt":20,"tk_let":21,"tk_id":22,"Tipodeclaracion":23,"Posiblearray":24,"PosibleAsignacion":25,";":26,"tk_const":27,":":28,"tk_number":29,"tk_string":30,"tk_boolean":31,"tk_void":32,"tk_array":33,"<":34,"TipoDato":35,">":36,"arrayllaves":37,"[":38,"]":39,"=":40,"Expresion":41,"Parametros":42,"{":43,"ParametrosTypevalor":44,"}":45,",":46,".":47,"tk_push":48,"(":49,")":50,"tk_pop":51,"Direccionarray":52,"Incydec":53,"tk_console":54,"tk_if":55,"Cuerpo":56,"Elset":57,"tk_else":58,"tk_while":59,"tk_do":60,"tk_for":61,"E_relacional":62,"tk_in":63,"tk_of":64,"tk_break":65,"tk_continue":66,"tk_type":67,"Parametostype":68,"tk_switch":69,"Casos":70,"Posibledefault":71,"tk_case":72,"tk_default":73,"tk_function":74,"ParametrosFucnc":75,"Posibleretorno":76,"Posiblecuerpo":77,"PosibleParametrosllamada":78,"MasParametrosFucnc":79,"OpeTernario":80,"E_aritmetica":81,"E_logica":82,"Factor":83,"E_Funcionexp":84,"?":85,"+":86,"-":87,"*":88,"/":89,"**":90,"%":91,">=":92,"<=":93,"==":94,"!=":95,"&&":96,"||":97,"!":98,"tk_entero":99,"tk_decimal":100,"tk_cadena":101,"tk_bool":102,"PosibleDireccionArray":103,"tk_length":104,"++":105,"--":106,"tk_return":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",21:"tk_let",22:"tk_id",26:";",27:"tk_const",28:":",29:"tk_number",30:"tk_string",31:"tk_boolean",32:"tk_void",33:"tk_array",34:"<",36:">",38:"[",39:"]",40:"=",43:"{",45:"}",46:",",47:".",48:"tk_push",49:"(",50:")",51:"tk_pop",54:"tk_console",55:"tk_if",58:"tk_else",59:"tk_while",60:"tk_do",61:"tk_for",63:"tk_in",64:"tk_of",65:"tk_break",66:"tk_continue",67:"tk_type",69:"tk_switch",72:"tk_case",73:"tk_default",74:"tk_function",85:"?",86:"+",87:"-",88:"*",89:"/",90:"**",91:"%",92:">=",93:"<=",94:"==",95:"!=",96:"&&",97:"||",98:"!",99:"tk_entero",100:"tk_decimal",101:"tk_cadena",102:"tk_bool",104:"tk_length",105:"++",106:"--",107:"tk_return"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,6],[7,6],[23,2],[23,2],[23,2],[23,2],[23,2],[23,5],[23,0],[23,1],[24,1],[24,0],[37,3],[37,2],[25,2],[25,4],[25,4],[25,3],[25,0],[42,3],[42,1],[44,5],[44,3],[8,4],[8,7],[8,6],[8,6],[8,5],[8,8],[8,7],[8,2],[52,4],[52,3],[9,5],[10,6],[57,2],[57,2],[57,0],[11,5],[12,7],[13,8],[14,8],[14,8],[15,8],[15,8],[16,2],[16,2],[17,7],[68,4],[68,5],[68,2],[68,1],[18,8],[70,7],[70,6],[70,6],[70,5],[71,3],[71,0],[19,9],[19,5],[78,1],[78,0],[76,2],[76,0],[75,4],[75,0],[79,5],[79,0],[77,1],[77,0],[56,3],[56,2],[56,1],[41,3],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[80,5],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,2],[81,2],[84,4],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[82,3],[82,3],[82,2],[83,1],[83,1],[83,1],[83,1],[83,1],[83,4],[83,2],[103,1],[103,0],[53,2],[53,2],[35,1],[35,1],[35,1],[35,1],[35,1],[20,2],[20,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
this.$ = [$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 29: case 54: case 55: case 94: case 95: case 96: case 97: case 98: case 99: case 127:
this.$=$$[$0];
break;
case 18:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en la Instruccion "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 19:

        this.$ = new Declaracion(TipoDato.LET, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 20:

        this.$ = new Declaracion(TipoDato.CONST, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 21:
this.$ =new N_Tipo(Tipo.NUMBER, $$[$0]);
break;
case 22:
this.$ =new N_Tipo(Tipo.STRING, $$[$0]);
break;
case 23:
this.$ =new N_Tipo(Tipo.BOOLEAN, $$[$0]);
break;
case 24:
this.$ =new N_Tipo(Tipo.NULL, $$[$0]);
break;
case 25:
this.$ =new N_Tipo(Tipo.TYPE, $$[$0]);
break;
case 26:
this.$ =new N_Tipo(Tipo.ARRAY, $$[$0-1]);
break;
case 28:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error al definir tipo "+yytext,"",this._$.first_line,this._$.first_column))
break;
case 31:

        let valor=new L_Array(null,$$[$0-2]);
        this.$=[valor];
    
break;
case 32:

        this.$=[new L_Array(null,null)];
    
break;
case 33:
this.$=new N_Declaracion($$[$0], null, null)
break;
case 34:
this.$=new N_Declaracion(null, $$[$0-1], null)
break;
case 35:
this.$=new N_Declaracion(null, null, $$[$0-1])
break;
case 36:
this.$=new N_Declaracion(null, null, null)
break;
case 38:

        $$[$0-2].push($$[$0]);
        this.$=$$[$0-2];
    
break;
case 39:

        this.$=[$$[$0]];
    
break;
case 40:

        $$[$0-4].push(new N_Parametros($$[$0-2],$$[$0]));
        this.$=$$[$0-4];
    
break;
case 41:

        this.$=[new N_Parametros($$[$0-2],$$[$0])];
    
break;
case 42:

        this.$ = new Asignacion($$[$0-3], $$[$0-1], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 43:

        this.$ = new AsignacionArray($$[$0-6], $$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 44:

        this.$ = new AsignacionArray($$[$0-5], $$[$0-3], null, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 45:

        this.$ = new AsignacionArray($$[$0-5], $$[$0-4], "", _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 46:

        this.$ = new AsignacionArray($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 47:

        this.$ = new pushpopcondireccion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 48:

        this.$ = new pushpopcondireccion($$[$0-6], $$[$0-5], $$[$0-3], null, _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 49: case 136:

        this.$=$$[$0-1];
    
break;
case 50:

        $$[$0-3].push($$[$0-1]);
        this.$=$$[$0-3];
    
break;
case 51:

        this.$=[$$[$0-1]];
    
break;
case 52:

        this.$ = new Imprimir($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 53:

        this.$ = new Ifelse($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 57:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 58:

        this.$ = new Dowhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 59:

        this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 60: case 61:

        this.$ = new Forin(TipoDato.LET, $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 62: case 63:

        this.$ = new Forof(TipoDato.LET, $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 64: case 65:
this.$=new BreakContinue($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 66:

        this.$ = new Type($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 67:

        $$[$0-3].push(new N_Type($$[$0-1],$$[$0]));
        this.$=$$[$0-3];
    
break;
case 68:

        $$[$0-4].push(new N_Type($$[$0-2],$$[$0-1]));
        this.$=$$[$0-4];
    
break;
case 69:

        this.$=[new N_Type($$[$0-1],$$[$0])];
    
break;
case 70:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en los parametros type "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 71:

        this.$= new SwitchCase($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 72:

        $$[$0-6].push(new Case($$[$0-4],$$[$0-2]));
        this.$=$$[$0-6];
    
break;
case 73:

        $$[$0-5].push(new Case($$[$0-3],new Array()));
        this.$=$$[$0-5];
    
break;
case 74:

        this.$=[new Case($$[$0-4],$$[$0-2])];
    
break;
case 75:

        this.$=[new Case($$[$0-3],new Array())];
    
break;
case 76: case 80: case 88:

        this.$=$$[$0];
    
break;
case 78:

        this.$ = new Funcion($$[$0-7], $$[$0-5], $$[$0-3], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 79:

        this.$ = new Llamarfuncion($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 82:
this.$=$$[$0]
break;
case 84:

        this.$=[new Parametrofunc($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)];
        this.$.push($$[$0]);
    
break;
case 86:

        this.$=[new Parametrofunc($$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column)]
        this.$.push($$[$0]);
    
break;
case 90:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 91:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 92:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en las llaves {} "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 93:
this.$=$$[$0-1];
break;
case 100:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en la expresion "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 101:

        this.$ = new Opeternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 102:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MAS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 103:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MENOS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 104:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MULT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 105:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 106:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.POT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 107:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 108:

        this.$ = new Aritmetica($$[$0], null, TipoAritmetico.UMENOS, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 109:

        this.$ = new Aritmetica($$[$0], null, TipoAritmetico.UMAS, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 110:

        this.$ = new Llamarfuncionexp($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 111:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MAYORQUE, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 112:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MENORQUE, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 113:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 114:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 115:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 116:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.DIFERENCIA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 117:

        this.$ = new Logica($$[$0-2], $$[$0],TipoLogica.AND, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 118:

        this.$ = new Logica($$[$0-2], $$[$0],TipoLogica.OR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 119:

        this.$ = new Logica($$[$0], null,TipoLogica.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 120: case 121:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 122:

        this.$ = new Literal($$[$0].replace(/\"|\'/g,""), _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 123:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 124:

        this.$ = new Id($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 125:

        this.$ = new AsignacionArrayExp($$[$0-3], $$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 126:

        this.$ = new Obtenervalorarray($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 129:

        this.$ = new Asignacion($$[$0-1], null, TipoAritmetico.INC,_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 130:

        this.$ = new Asignacion($$[$0-1], null, TipoAritmetico.DEC, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 131:
this.$ = "number";
break;
case 132:
this.$ = "string";
break;
case 133:
this.$ = "boolean";
break;
case 134:
this.$ = "void";
break;
case 135:
this.$ = $$[$0];
break;
case 137:

        this.$=$$[$0-2];
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,27:$V3,53:22,54:$V4,55:$V5,59:$V6,60:$V7,61:$V8,65:$V9,66:$Va,67:$Vb,69:$Vc,74:$Vd,107:$Ve},{1:[3]},{2:$V0,5:[1,34],6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,27:$V3,53:22,54:$V4,55:$V5,59:$V6,60:$V7,61:$V8,65:$V9,66:$Va,67:$Vb,69:$Vc,74:$Vd,107:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,17]),o($Vf,[2,18]),{22:[1,36]},{22:[1,37]},{38:$Vg,40:[1,38],47:[1,39],49:[1,41],52:40,105:$Vh,106:$Vi},{26:[1,45]},{49:[1,46]},{49:[1,47]},{49:[1,48]},{2:$Vj,43:$Vk,56:49},{49:[1,52]},{26:[1,53]},{26:[1,54]},{22:[1,55]},{49:[1,56]},{22:[1,57]},{2:$Vl,22:$Vm,26:[1,58],41:59,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{1:[2,1]},o($Vf,[2,2]),o($Vv,$Vw,{23:76,2:$Vx,28:$Vy}),o($Vv,$Vw,{23:79,2:$Vx,28:$Vy}),{2:$Vl,22:$Vm,41:80,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{48:[1,81],51:[1,82]},{38:$Vz,40:[1,83],47:[1,84]},{2:$Vl,22:$Vm,41:88,42:87,49:$Vn,50:$VA,62:63,78:86,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},o($VB,[2,129]),o($VB,[2,130]),{2:$Vl,22:$Vm,41:89,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},o($Vf,[2,49]),{2:$Vl,22:$Vm,41:90,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:91,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:92,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{59:[1,93]},{2:$V0,4:94,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,27:$V3,45:[1,95],53:22,54:$V4,55:$V5,59:$V6,60:$V7,61:$V8,65:$V9,66:$Va,67:$Vb,69:$Vc,74:$Vd,107:$Ve},o($VC,[2,92]),{7:96,21:[1,97],27:[1,98]},o($Vf,$VD),o($Vf,[2,65]),{40:[1,99]},{2:$Vl,22:$Vm,41:100,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{49:[1,101]},o($Vf,[2,136]),{26:[1,102],34:$VE,36:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{2:$Vl,22:$Vm,41:118,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},o($VT,[2,94]),o($VT,[2,95]),o($VT,$VU),o($VT,[2,97]),o($VT,[2,98]),o($VT,[2,99]),o($VT,[2,100]),{2:$Vl,22:$Vm,41:119,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:120,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:121,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},o($VT,[2,120]),o($VT,[2,121]),o($VT,[2,122]),o($VT,[2,123]),o($VT,[2,124],{103:122,52:123,38:$Vg,47:[2,128],49:[1,124]}),o($VV,$VW,{24:125,37:126,38:$VX}),{22:[1,132],29:[1,128],30:[1,129],31:[1,130],32:[1,131],33:[1,133]},o($VY,[2,28]),o($VV,$VW,{37:126,24:134,38:$VX}),{26:[1,135],34:$VE,36:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{49:[1,136]},{49:[1,137]},{2:$Vl,22:$Vm,38:[1,138],41:139,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{48:[1,140],51:[1,141]},{2:$Vl,22:$Vm,41:142,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{50:[1,143]},{46:$VZ,50:[2,80]},o($V_,[2,39],{34:$VE,36:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS}),{34:$VE,36:$VF,39:[1,145],85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{34:$VE,36:$VF,50:[1,146],85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{34:$VE,36:$VF,50:[1,147],85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{34:$VE,36:$VF,50:[1,148],85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{49:[1,149]},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,27:$V3,45:[1,150],53:22,54:$V4,55:$V5,59:$V6,60:$V7,61:$V8,65:$V9,66:$Va,67:$Vb,69:$Vc,74:$Vd,107:$Ve},o($VC,[2,91]),{2:$Vl,22:$Vm,41:152,49:$Vn,62:151,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{22:[1,153]},{22:[1,154]},{43:[1,155]},{34:$VE,36:$VF,50:[1,156],85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{22:[1,158],50:[2,85],75:157},o($Vf,[2,137]),{2:$Vl,22:$Vm,41:159,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:160,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:161,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:162,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:163,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:164,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:165,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:166,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:167,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:168,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:169,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:170,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:171,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:172,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$Vl,22:$Vm,41:173,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{34:$VE,36:$VF,50:[1,174],85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},o($VT,[2,108]),o($VT,[2,109]),o($VT,[2,119]),{47:[1,175]},o($VT,[2,126],{38:$Vz,47:[2,127]}),{2:$Vl,22:$Vm,41:88,42:87,49:$Vn,50:$VA,62:63,78:176,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{25:177,26:$V$,40:$V01},o($VV,[2,29],{38:[1,179]}),{39:[1,180]},o($VY,[2,21]),o($VY,[2,22]),o($VY,[2,23]),o($VY,[2,24]),o($VY,[2,25]),{34:[1,181]},{25:182,26:$V$,40:$V01},o($Vf,[2,42]),{2:$Vl,22:$Vm,41:183,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{50:[1,184]},{39:[1,185]},{26:[1,186],34:$VE,36:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{49:[1,187]},{49:[1,188]},{34:$VE,36:$VF,39:[1,189],85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{26:[1,190]},{2:$Vl,22:$Vm,41:191,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},o($V11,[2,51]),{26:[1,192]},{2:$Vj,43:$Vk,56:193},{2:$Vj,43:$Vk,56:194},{2:$Vl,22:$Vm,41:195,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},o($VC,[2,90]),o([34,36,85,86,87,88,89,90,91,92,93,94,95,96,97],$VU,{26:[1,196]}),{34:$VE,36:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},o($Vv,$Vw,{23:76,2:$Vx,28:$Vy,63:[1,197],64:[1,198]}),o($Vv,$Vw,{23:79,2:$Vx,28:$Vy,63:[1,199],64:[1,200]}),{2:[1,203],22:[1,202],68:201},{43:[1,204]},{50:[1,205]},{28:[1,206]},{28:[1,207],34:$VE,36:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},o($V21,[2,102],{88:$VJ,89:$VK,90:$VL,91:$VM}),o($V21,[2,103],{88:$VJ,89:$VK,90:$VL,91:$VM}),o($V31,[2,104],{90:$VL,91:$VM}),o($V31,[2,105],{90:$VL,91:$VM}),o($VT,[2,106]),o($VT,[2,107]),o($V41,[2,111],{86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM}),o($V41,[2,112],{86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM}),o($V41,[2,113],{86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM}),o($V41,[2,114],{86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM}),o($V41,[2,115],{34:$VE,36:$VF,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO}),o($V41,[2,116],{34:$VE,36:$VF,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO}),o([26,28,39,45,46,50,85,96,97],[2,117],{34:$VE,36:$VF,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ}),o([26,28,39,45,46,50,85,97],[2,118],{34:$VE,36:$VF,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),o($VT,[2,93]),{104:[1,208]},{50:[1,209]},{26:[1,210]},{2:$Vl,22:$Vm,38:[1,212],41:211,43:[1,213],49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{39:[1,214]},o($Vv,[2,32]),{22:$V51,29:$V61,30:$V71,31:$V81,32:$V91,35:215},{26:[1,221]},{34:$VE,36:$VF,50:[1,222],85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{26:[1,223]},{26:[1,224]},o($Vf,[2,46]),{2:$Vl,22:$Vm,41:225,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{50:[1,226]},o($V11,[2,50]),o($Vf,[2,79]),o($V_,[2,38],{34:$VE,36:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS}),o($Vf,[2,52]),o($Vf,[2,56],{57:227,58:[1,228]}),o($Vf,[2,57]),{34:$VE,36:$VF,50:[1,229],85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{22:[1,231],53:230},{22:[1,232]},{22:[1,233]},{22:[1,234]},{22:[1,235]},{26:[1,238],45:[1,236],46:[1,237]},o($Va1,$Vw,{23:239,2:$Vx,28:$Vy}),o($Va1,[2,70]),{70:240,72:[1,241]},{28:[1,243],43:[2,83],76:242},{22:$V51,29:$V61,30:$V71,31:$V81,32:$V91,35:244},{2:$Vl,22:$Vm,41:245,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},o($VT,[2,125]),o($VT,[2,110]),o($Vb1,[2,19]),{26:[2,33],34:$VE,36:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{2:$Vl,22:$Vm,39:[1,247],41:88,42:246,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{22:[1,249],44:248},o($Vv,[2,31]),{36:[1,250]},o($Vc1,[2,131]),o($Vc1,[2,132]),o($Vc1,[2,133]),o($Vc1,[2,134]),o($Vc1,[2,135]),o($Vb1,[2,20]),{26:[1,251]},o($Vf,[2,44]),o($Vf,[2,45]),{34:$VE,36:$VF,50:[1,252],85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{26:[1,253]},o($Vf,[2,53]),{2:$Vj,10:255,43:$Vk,55:$V5,56:254},{26:[1,256]},{50:[1,257]},{105:$Vh,106:$Vi},{50:[1,258]},{50:[1,259]},{50:[1,260]},{50:[1,261]},{26:[1,262]},{22:[1,263]},{22:[1,264]},o($Va1,[2,69]),{45:[2,77],71:265,72:[1,266],73:[1,267]},{2:$Vl,22:$Vm,41:268,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{43:[1,269]},{22:$V51,29:$V61,30:$V71,31:$V81,32:$V91,35:270},{46:$Vd1,50:$Ve1,79:271},o([26,28,39,45,46,50,85],[2,101],{34:$VE,36:$VF,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS}),{39:[1,273],46:$VZ},{26:[2,36]},{45:[1,274],46:[1,275]},{28:[1,276]},o($VY,[2,26]),o($Vf,[2,43]),{26:[1,277]},o($Vf,[2,48]),o($Vf,[2,54]),o($Vf,[2,55]),o($Vf,[2,58]),{2:$Vj,43:$Vk,56:278},{2:$Vj,43:$Vk,56:279},{2:$Vj,43:$Vk,56:280},{2:$Vj,43:$Vk,56:281},{2:$Vj,43:$Vk,56:282},o($Vf,[2,66]),o($Va1,$Vw,{23:283,2:$Vx,28:$Vy}),{2:$Vx,23:284,26:$Vw,28:$Vy},{45:[1,285]},{2:$Vl,22:$Vm,41:286,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{28:[1,287]},{28:[1,288],34:$VE,36:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{2:$V0,4:290,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,27:$V3,45:[2,89],53:22,54:$V4,55:$V5,59:$V6,60:$V7,61:$V8,65:$V9,66:$Va,67:$Vb,69:$Vc,74:$Vd,77:289,107:$Ve},{43:[2,82]},{50:[2,84]},{22:[1,291]},{26:[2,34]},{26:[2,35]},{22:[1,292]},{2:$Vl,22:$Vm,41:293,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},o($Vf,[2,47]),o($Vf,[2,59]),o($Vf,[2,60]),o($Vf,[2,62]),o($Vf,[2,61]),o($Vf,[2,63]),o($Va1,[2,67]),{26:[1,294]},o($Vf,[2,71]),{28:[1,295],34:$VE,36:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS},{2:$V0,4:296,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,27:$V3,53:22,54:$V4,55:$V5,59:$V6,60:$V7,61:$V8,65:$V9,66:$Va,67:$Vb,69:$Vc,74:$Vd,107:$Ve},{2:$V0,4:297,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,27:$V3,53:22,54:$V4,55:$V5,59:$V6,60:$V7,61:$V8,65:[1,298],66:$Va,67:$Vb,69:$Vc,74:$Vd,107:$Ve},{45:[1,299]},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,27:$V3,45:[2,88],53:22,54:$V4,55:$V5,59:$V6,60:$V7,61:$V8,65:$V9,66:$Va,67:$Vb,69:$Vc,74:$Vd,107:$Ve},{28:[1,300]},{28:[1,301]},o($Vf1,[2,41],{34:$VE,36:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS}),o($Va1,[2,68]),{2:$V0,4:302,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,27:$V3,53:22,54:$V4,55:$V5,59:$V6,60:$V7,61:$V8,65:[1,303],66:$Va,67:$Vb,69:$Vc,74:$Vd,107:$Ve},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,27:$V3,45:[2,76],53:22,54:$V4,55:$V5,59:$V6,60:$V7,61:$V8,65:$V9,66:$Va,67:$Vb,69:$Vc,74:$Vd,107:$Ve},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,27:$V3,53:22,54:$V4,55:$V5,59:$V6,60:$V7,61:$V8,65:[1,304],66:$Va,67:$Vb,69:$Vc,74:$Vd,107:$Ve},{26:[1,305]},o($Vf,[2,78]),{22:$V51,29:$V61,30:$V71,31:$V81,32:$V91,35:306},{2:$Vl,22:$Vm,41:307,49:$Vn,62:63,80:61,81:62,82:64,83:65,84:66,86:$Vo,87:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,27:$V3,53:22,54:$V4,55:$V5,59:$V6,60:$V7,61:$V8,65:[1,308],66:$Va,67:$Vb,69:$Vc,74:$Vd,107:$Ve},{26:[1,309]},{26:[1,310]},o($Vg1,$VD,{45:$Vh1,72:$Vh1,73:$Vh1}),{46:$Vd1,50:$Ve1,79:311},o($Vf1,[2,40],{34:$VE,36:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS}),{26:[1,312]},o($Vg1,$VD,{45:$Vi1,72:$Vi1,73:$Vi1}),o($Vg1,$VD,{45:$Vj1,72:$Vj1,73:$Vj1}),{50:[2,86]},o($Vg1,$VD,{45:$Vk1,72:$Vk1,73:$Vk1})],
defaultActions: {34:[2,1],247:[2,36],270:[2,82],271:[2,84],273:[2,34],274:[2,35],311:[2,86]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const CL_Error = require('../build/Errores/L_Error');
    const CN_Error = require('../build/Errores/N_Error');
    const {TipoDato, Tipo, TipoAritmetico, TipoRelacional, TipoLogica} = require('../build/Abstracto/Retorno');
    const {Literal} = require('../build/Expresiones/Literal');
    const {Aritmetica} = require('../build/Expresiones/Aritmetica');
    const {Relacional} = require('../build/Expresiones/Relacional');
    const {Logica} = require('../build/Expresiones/Logica');
    const {Opeternario} = require('../build/Expresiones/Opeternario');
    const {Llamarfuncionexp} = require('../build/Expresiones/Llamarfuncionexp');
    const {Imprimir} = require('../build/Instrucciones/Imprimir');
    const {Ifelse} = require('../build/Instrucciones/Ifelse');
    const {While} = require('../build/Instrucciones/While');
    const {For} = require('../build/Instrucciones/For/For');
    const {Forin} = require('../build/Instrucciones/For/Forin');
    const {Forof} = require('../build/Instrucciones/For/Forof');
    const {Dowhile} = require('../build/Instrucciones/Dowhile');
    const {Declaracion, N_Declaracion, N_Parametros} = require('../build/Instrucciones/Declaracion');
    const {Asignacion} = require('../build/Instrucciones/Asignacion');
    const {Statement} = require('../build/Instrucciones/Statement');
    const {Id} = require('../build/Expresiones/Id');
    const {Funcion, Parametrofunc} = require('../build/Instrucciones/Funcion');
    const {Llamarfuncion} = require('../build/Instrucciones/Llamarfuncion');
    const {Type} = require('../build/Instrucciones/Type');
    const {N_Type} = require('../build/Otros/L_Types');
    const {N_Tipo} = require('../build/Otros/N_Tipo');
    const {L_Array} = require('../build/Instrucciones/Array');
    const {AsignacionArray, AsignacionArrayExp, Obtenervalorarray, pushpopcondireccion} = require('../build/Instrucciones/AsignacionArray');
    const {SwitchCase, Case} = require('../build/Instrucciones/SwitchCase');
    const {BreakContinue} = require('../build/Instrucciones/BreakContinue');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Comentario de una*/
break;
case 1:/*Comentario multilinea*/
break;
case 2:return 21
break;
case 3:return 27
break;
case 4:return 30
break;
case 5:return 29
break;
case 6:return 31
break;
case 7:return 32
break;
case 8:return 55
break;
case 9:return 58
break;
case 10:return 69
break;
case 11:return 72
break;
case 12:return 73
break;
case 13:return 59
break;
case 14:return 60
break;
case 15:return 61
break;
case 16:return 66
break;
case 17:return 107
break;
case 18:return 65
break;
case 19:return 74
break;
case 20:return 54
break;
case 21:return 'graficar_ts'
break;
case 22:return 67
break;
case 23:return 33
break;
case 24:return 48
break;
case 25:return 51
break;
case 26:return 104
break;
case 27:return 63
break;
case 28:return 64
break;
case 29:return 94
break;
case 30:return 95
break;
case 31:return 92
break;
case 32:return 36
break;
case 33:return 93
break;
case 34:return 34 
break;
case 35:return 96
break;
case 36:return 97
break;
case 37:return 98
break;
case 38:return 105
break;
case 39:return 106
break;
case 40:return 43
break;
case 41:return 45
break;
case 42:return 26
break;
case 43:return 40
break;
case 44:return 49
break;
case 45:return 50
break;
case 46:return 46
break;
case 47:return 28
break;
case 48:return 47
break;
case 49:return 38
break;
case 50:return 39
break;
case 51:return 85
break;
case 52:return 102
break;
case 53:return 100
break;
case 54:return 99
break;
case 55:return 101
break;
case 56:return 22;
break;
case 57:return 90
break;
case 58:return 86
break;
case 59:return 87
break;
case 60:return 88
break;
case 61:return 89
break;
case 62:return 91
break;
case 63: /*se ignoran*/ 
break;
case 64:  return 5;   
break;
case 65:CL_Error.L_Errores.push(new CN_Error.N_Error("Lexico",yy_.yytext,"",yy_.yylineno,yy_.yylloc.first_column));
break;
}
},
rules: [/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:function\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:true|false\b)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[\"|\']([^\"\n]|(\\"))*[\"|\'])/,/^(?:([a-zA-Z])[a-zA-Z0-9_ñÑ]*)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}