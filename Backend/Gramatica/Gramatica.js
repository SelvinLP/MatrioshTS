/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,14],$V2=[1,13],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[5,15,16,20,29,32,36,37,38,40,42],$Va=[1,28],$Vb=[1,29],$Vc=[1,35],$Vd=[19,26],$Ve=[2,18],$Vf=[1,39],$Vg=[1,54],$Vh=[1,42],$Vi=[1,48],$Vj=[1,47],$Vk=[1,49],$Vl=[1,50],$Vm=[1,51],$Vn=[1,52],$Vo=[1,53],$Vp=[19,31],$Vq=[2,20],$Vr=[1,65],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[1,85],$VG=[19,31,46,47,48,49,50,51,52,53,54,55,56,57,58,59],$VH=[2,37],$VI=[5,15,16,20,29,32,35,36,37,38,40,42],$VJ=[5,15,16,20,29,30,32,36,37,38,40,42,46,47,60,61,62,63,64],$VK=[19,31,46,47,52,53,54,55,56,57,58,59],$VL=[19,31,46,47,48,49,52,53,54,55,56,57,58,59],$VM=[19,31,56,57,58,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"LInstrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"Asignacion":8,"Impresion":9,"Ift":10,"Whilet":11,"Dowhilet":12,"Fort":13,"Funciones":14,"tk_let":15,"tk_id":16,"Tipodeclaracion":17,"PosibleAsignacion":18,";":19,"tk_const":20,":":21,"tk_number":22,"tk_string":23,"tk_boolean":24,"tk_void":25,"=":26,"Expresion":27,"Incydec":28,"tk_console":29,"(":30,")":31,"tk_if":32,"Cuerpo":33,"Elset":34,"tk_else":35,"tk_while":36,"tk_do":37,"tk_for":38,"E_relacional":39,"tk_function":40,"{":41,"}":42,"E_aritmetica":43,"E_logica":44,"Factor":45,"+":46,"-":47,"*":48,"/":49,"**":50,"%":51,">":52,"<":53,">=":54,"<=":55,"==":56,"!=":57,"&&":58,"||":59,"!":60,"tk_entero":61,"tk_decimal":62,"tk_cadena":63,"tk_bool":64,"++":65,"--":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"tk_let",16:"tk_id",19:";",20:"tk_const",21:":",22:"tk_number",23:"tk_string",24:"tk_boolean",25:"tk_void",26:"=",29:"tk_console",30:"(",31:")",32:"tk_if",35:"tk_else",36:"tk_while",37:"tk_do",38:"tk_for",40:"tk_function",41:"{",42:"}",46:"+",47:"-",48:"*",49:"/",50:"**",51:"%",52:">",53:"<",54:">=",55:"<=",56:"==",57:"!=",58:"&&",59:"||",60:"!",61:"tk_entero",62:"tk_decimal",63:"tk_cadena",64:"tk_bool",65:"++",66:"--"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,5],[17,2],[17,2],[17,2],[17,2],[17,0],[18,2],[18,0],[8,4],[8,2],[9,5],[10,6],[34,2],[34,2],[34,0],[11,5],[12,7],[13,8],[14,5],[14,4],[33,3],[33,2],[27,3],[27,1],[27,1],[27,1],[27,1],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[44,3],[44,3],[44,2],[45,1],[45,1],[45,1],[45,1],[45,1],[28,2],[28,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
this.$ = [$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 19: case 25: case 26: case 36: case 37: case 38: case 39:
this.$=$$[$0];
break;
case 12:

        this.$ = new Declaracion(TipoDato.LET, $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 13:

        this.$ = new Declaracion(TipoDato.CONST, $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 14:
this.$=Tipo.NUMBER
break;
case 15:
this.$=Tipo.STRING
break;
case 16:
this.$=Tipo.BOOLEAN
break;
case 17:
this.$=Tipo.NULL
break;
case 21:

        this.$ = new Asignacion($$[$0-3], $$[$0-1], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 22:

        this.$=$$[$0-1];
    
break;
case 23:

        this.$ = new Imprimir($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 24:

        this.$ = new Ifelse($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 28:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 29:

        this.$ = new Dowhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 30:

        this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 31:

        this.$ = new Funcion($$[$0-3], [], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 32:

        this.$ = new Llamarfuncion($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 33:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 34:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 35:
this.$=$$[$0-1];
break;
case 40:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MAS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 41:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MENOS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 42:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MULT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 43:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 44:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.POT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 45:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 46:

        this.$ = new Aritmetica($$[$0], null, TipoAritmetico.UMENOS, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 47:

        this.$ = new Aritmetica($$[$0], null, TipoAritmetico.UMAS, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 48:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MAYORQUE, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 49:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MENORQUE, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 50:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 51:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 52:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 53:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.DIFERENCIA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 54:

        this.$ = new Logica($$[$0-2], $$[$0],TipoLogica.AND, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 55:

        this.$ = new Logica($$[$0-2], $$[$0],TipoLogica.OR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 56:

        this.$ = new Logica($$[$0], null,TipoLogica.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 57: case 58:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 59:

        this.$ = new Literal($$[$0].replace(/\"|\'/g,""), _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 60:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 61:

        this.$ = new Id($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 62:

        this.$ = new Asignacion($$[$0-1], null, TipoAritmetico.INC,_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 63:

        this.$ = new Asignacion($$[$0-1], null, TipoAritmetico.DEC, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,20:$V2,28:15,29:$V3,32:$V4,36:$V5,37:$V6,38:$V7,40:$V8},{1:[3]},{5:[1,22],6:23,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,20:$V2,28:15,29:$V3,32:$V4,36:$V5,37:$V6,38:$V7,40:$V8},o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),o($V9,[2,10]),o($V9,[2,11]),{16:[1,24]},{16:[1,25]},{26:[1,26],30:[1,27],65:$Va,66:$Vb},{19:[1,30]},{30:[1,31]},{30:[1,32]},{30:[1,33]},{33:34,41:$Vc},{30:[1,36]},{16:[1,37]},{1:[2,1]},o($V9,[2,2]),o($Vd,$Ve,{17:38,21:$Vf}),o($Vd,$Ve,{17:40,21:$Vf}),{16:$Vg,27:41,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{31:[1,55]},o($Vp,[2,62]),o($Vp,[2,63]),o($V9,[2,22]),{16:$Vg,27:56,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:57,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:58,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{36:[1,59]},{4:60,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,20:$V2,28:15,29:$V3,32:$V4,36:$V5,37:$V6,38:$V7,40:$V8,42:[1,61]},{7:62,15:$V0,20:$V2},{30:[1,63]},{18:64,19:$Vq,26:$Vr},{22:[1,66],23:[1,67],24:[1,68],25:[1,69]},{18:70,19:$Vq,26:$Vr},{19:[1,71],46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF},{16:$Vg,27:86,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},o($VG,[2,36]),o($VG,$VH),o($VG,[2,38]),o($VG,[2,39]),{16:$Vg,27:87,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:88,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:89,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},o($VG,[2,57]),o($VG,[2,58]),o($VG,[2,59]),o($VG,[2,60]),o($VG,[2,61]),{19:[1,90]},{31:[1,91],46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF},{31:[1,92],46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF},{31:[1,93],46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF},{30:[1,94]},{6:23,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,20:$V2,28:15,29:$V3,32:$V4,36:$V5,37:$V6,38:$V7,40:$V8,42:[1,95]},o($VI,[2,34]),{16:$Vg,27:97,30:$Vh,39:96,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{31:[1,98]},{19:[1,99]},{16:$Vg,27:100,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},o($Vd,[2,14]),o($Vd,[2,15]),o($Vd,[2,16]),o($Vd,[2,17]),{19:[1,101]},o($V9,[2,21]),{16:$Vg,27:102,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:103,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:104,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:105,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:106,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:107,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:108,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:109,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:110,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:111,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:112,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:113,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:114,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{16:$Vg,27:115,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},{31:[1,116],46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF},o($VG,[2,46]),o($VG,[2,47]),o($VG,[2,56]),o($V9,[2,32]),{19:[1,117]},{33:118,41:$Vc},{33:119,41:$Vc},{16:$Vg,27:120,30:$Vh,39:44,43:43,44:45,45:46,46:$Vi,47:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo},o($VI,[2,33]),o([46,47,48,49,50,51,52,53,54,55,56,57,58,59],$VH,{19:[1,121]}),{46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF},{33:122,41:$Vc},o($VJ,[2,12]),{19:[2,19],46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF},o($VJ,[2,13]),o($VK,[2,40],{48:$Vu,49:$Vv,50:$Vw,51:$Vx}),o($VK,[2,41],{48:$Vu,49:$Vv,50:$Vw,51:$Vx}),o($VL,[2,42],{50:$Vw,51:$Vx}),o($VL,[2,43],{50:$Vw,51:$Vx}),o($VG,[2,44]),o($VG,[2,45]),o($VM,[2,48],{46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx}),o($VM,[2,49],{46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx}),o($VM,[2,50],{46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx}),o($VM,[2,51],{46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx}),o($VM,[2,52],{46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB}),o($VM,[2,53],{46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB}),o([19,31,58,59],[2,54],{46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD}),o([19,31,59],[2,55],{46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE}),o($VG,[2,35]),o($V9,[2,23]),o($V9,[2,27],{34:123,35:[1,124]}),o($V9,[2,28]),{31:[1,125],46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF},{16:[1,127],28:126},o($V9,[2,31]),o($V9,[2,24]),{10:129,32:$V4,33:128,41:$Vc},{19:[1,130]},{31:[1,131]},{65:$Va,66:$Vb},o($V9,[2,25]),o($V9,[2,26]),o($V9,[2,29]),{33:132,41:$Vc},o($V9,[2,30])],
defaultActions: {22:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const CL_Error = require('../build/Errores/L_Error');
    const CN_Error = require('../build/Errores/N_Error');
    const {TipoDato, Tipo, TipoAritmetico, TipoRelacional, TipoLogica} = require('../build/Abstracto/Retorno');
    const {Literal} = require('../build/Expresiones/Literal');
    const {Aritmetica} = require('../build/Expresiones/Aritmetica');
    const {Relacional} = require('../build/Expresiones/Relacional');
    const {Logica} = require('../build/Expresiones/Logica');
    const {Imprimir} = require('../build/Instrucciones/Imprimir');
    const {Ifelse} = require('../build/Instrucciones/Ifelse');
    const {While} = require('../build/Instrucciones/While');
    const {For} = require('../build/Instrucciones/For');
    const {Dowhile} = require('../build/Instrucciones/Dowhile');
    const {Declaracion} = require('../build/Instrucciones/Declaracion');
    const {Asignacion} = require('../build/Instrucciones/Asignacion');
    const {Statement} = require('../build/Instrucciones/Statement');
    const {Id} = require('../build/Expresiones/Id');
    const {Funcion} = require('../build/Instrucciones/Funcion');
    const {Llamarfuncion} = require('../build/Instrucciones/Llamarfuncion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Comentario de una*/
break;
case 1:/*Comentario multilinea*/
break;
case 2:return 15
break;
case 3:return 20
break;
case 4:return 23
break;
case 5:return 22
break;
case 6:return 24
break;
case 7:return 25
break;
case 8:return 32
break;
case 9:return 35
break;
case 10:return 'tk_switch'
break;
case 11:return 'tk_case'
break;
case 12:return 'tk_default'
break;
case 13:return 36
break;
case 14:return 37
break;
case 15:return 38
break;
case 16:return 'tk_continue'
break;
case 17:return 'tk_return'
break;
case 18:return 'tk_break'
break;
case 19:return 40
break;
case 20:return 29
break;
case 21:return 'graficar_ts'
break;
case 22:return 56
break;
case 23:return 57
break;
case 24:return 54
break;
case 25:return 52
break;
case 26:return 55
break;
case 27:return 53 
break;
case 28:return 58
break;
case 29:return 59
break;
case 30:return 60
break;
case 31:return 65
break;
case 32:return 66
break;
case 33:return 41
break;
case 34:return 42
break;
case 35:return 19
break;
case 36:return 26
break;
case 37:return 30
break;
case 38:return 31
break;
case 39:return ','
break;
case 40:return 21
break;
case 41:return '.'
break;
case 42:return 64
break;
case 43:return 62
break;
case 44:return 61
break;
case 45:return 63
break;
case 46:return 16;
break;
case 47:return 50
break;
case 48:return 46
break;
case 49:return 47
break;
case 50:return 48
break;
case 51:return 49
break;
case 52:return 51
break;
case 53: /*se ignoran*/ 
break;
case 54:  return 5;   
break;
case 55:CL_Error.L_Errores.push(new CN_Error.N_Error("Lexico",yy_.yytext,yy_.yylineno,yy_.yylloc.first_column))
break;
}
},
rules: [/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:function\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:true|false\b)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[\"|\']([^\"\n]|(\\"))*[\"|\'])/,/^(?:([a-zA-Z])[a-zA-Z0-9_ñÑ]*)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}