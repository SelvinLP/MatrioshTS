/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,22],$V2=[1,20],$V3=[1,23],$V4=[1,21],$V5=[1,25],$V6=[1,26],$V7=[1,27],$V8=[1,28],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[1,33],$Ve=[1,34],$Vf=[1,35],$Vg=[2,5,22,26,27,31,49,56,57,61,62,63,67,68,69,71,74,75,76,111],$Vh=[1,48],$Vi=[1,47],$Vj=[1,45],$Vk=[1,46],$Vl=[1,55],$Vm=[1,54],$Vn=[1,71],$Vo=[1,64],$Vp=[1,79],$Vq=[1,73],$Vr=[1,72],$Vs=[1,74],$Vt=[1,75],$Vu=[1,76],$Vv=[1,77],$Vw=[1,78],$Vx=[25,42,44],$Vy=[2,29],$Vz=[1,82],$VA=[1,81],$VB=[1,90],$VC=[2,86],$VD=[24,25],$VE=[24,25,32,38,40,42,43,44,49,50,51,89,90,91,92,93,94,95,96,97,98,99,100,101],$VF=[2,5,22,26,27,31,49,56,57,60,61,62,63,67,68,69,71,74,75,76,111],$VG=[1,116],$VH=[1,115],$VI=[1,108],$VJ=[1,109],$VK=[1,110],$VL=[1,111],$VM=[1,112],$VN=[1,113],$VO=[1,114],$VP=[1,117],$VQ=[1,118],$VR=[1,119],$VS=[1,120],$VT=[1,121],$VU=[1,122],$VV=[24,25,32,38,40,43,49,50,89,90,91,92,93,94,95,96,97,98,99,100,101],$VW=[2,105],$VX=[25,44],$VY=[2,32],$VZ=[1,132],$V_=[25,42,44,49,50],$V$=[1,150],$V01=[24,43,50],$V11=[2,39],$V21=[1,184],$V31=[24,25,32,38,40,43,49,50,89,90,91,96,97,98,99,100,101],$V41=[24,25,32,38,40,43,49,50,89,90,91,92,93,96,97,98,99,100,101],$V51=[24,25,32,43,49,50,89,98,99,100,101],$V61=[1,227],$V71=[1,226],$V81=[1,222],$V91=[1,223],$Va1=[1,224],$Vb1=[1,225],$Vc1=[25,49,50],$Vd1=[2,5,22,23,26,27,31,49,56,57,61,62,63,67,68,69,71,74,75,76,90,91,102,103,104,105,106,111],$Ve1=[24,40,42,47,50],$Vf1=[49,74,75],$Vg1=[24,50],$Vh1=[2,94],$Vi1=[1,282],$Vj1=[49,50],$Vk1=[2,92],$Vl1=[1,302],$Vm1=[24,42,50];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"LInstrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"Graficartst":8,"Asignacion":9,"Impresion":10,"Ift":11,"Whilet":12,"Dowhilet":13,"Fort":14,"Forint":15,"Foroft":16,"BreakyContinue":17,"Types":18,"Switcht":19,"Funciones":20,"Returnt":21,"tk_graficar_ts":22,"(":23,")":24,";":25,"tk_let":26,"tk_id":27,"Tipodeclaracion":28,"Posiblearray":29,"PosibleAsignacion":30,"tk_const":31,":":32,"tk_number":33,"tk_string":34,"tk_boolean":35,"tk_void":36,"tk_array":37,"<":38,"TipoDato":39,">":40,"arrayllaves":41,"[":42,"]":43,"=":44,"Expresion":45,"Parametros":46,"{":47,"ParametrosTypevalor":48,"}":49,",":50,".":51,"tk_push":52,"tk_pop":53,"Direccionarray":54,"Incydec":55,"tk_console":56,"tk_if":57,"Cuerpo":58,"Elset":59,"tk_else":60,"tk_while":61,"tk_do":62,"tk_for":63,"E_relacional":64,"tk_in":65,"tk_of":66,"tk_break":67,"tk_continue":68,"tk_type":69,"Parametostype":70,"tk_switch":71,"Casos":72,"Posibledefault":73,"tk_case":74,"tk_default":75,"tk_function":76,"ParametrosFucnc":77,"Posibleretorno":78,"Posiblecuerpo":79,"PosibleParametrosllamada":80,"Posiblesllavesparafunc":81,"MasParametrosFucnc":82,"Llavesparafuncion":83,"OpeTernario":84,"E_aritmetica":85,"E_logica":86,"Factor":87,"E_Funcionexp":88,"?":89,"+":90,"-":91,"*":92,"/":93,"**":94,"%":95,">=":96,"<=":97,"==":98,"!=":99,"&&":100,"||":101,"!":102,"tk_entero":103,"tk_decimal":104,"tk_cadena":105,"tk_bool":106,"PosibleDireccionArray":107,"tk_length":108,"++":109,"--":110,"tk_return":111,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",22:"tk_graficar_ts",23:"(",24:")",25:";",26:"tk_let",27:"tk_id",31:"tk_const",32:":",33:"tk_number",34:"tk_string",35:"tk_boolean",36:"tk_void",37:"tk_array",38:"<",40:">",42:"[",43:"]",44:"=",47:"{",49:"}",50:",",51:".",52:"tk_push",53:"tk_pop",56:"tk_console",57:"tk_if",60:"tk_else",61:"tk_while",62:"tk_do",63:"tk_for",65:"tk_in",66:"tk_of",67:"tk_break",68:"tk_continue",69:"tk_type",71:"tk_switch",74:"tk_case",75:"tk_default",76:"tk_function",89:"?",90:"+",91:"-",92:"*",93:"/",94:"**",95:"%",96:">=",97:"<=",98:"==",99:"!=",100:"&&",101:"||",102:"!",103:"tk_entero",104:"tk_decimal",105:"tk_cadena",106:"tk_bool",108:"tk_length",109:"++",110:"--",111:"tk_return"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[8,4],[7,6],[7,6],[28,2],[28,2],[28,2],[28,2],[28,2],[28,5],[28,0],[28,1],[29,1],[29,0],[41,3],[41,2],[30,2],[30,4],[30,4],[30,3],[30,0],[46,3],[46,1],[48,5],[48,3],[48,1],[9,4],[9,7],[9,6],[9,6],[9,5],[9,8],[9,7],[9,2],[54,4],[54,3],[54,1],[10,5],[11,6],[59,2],[59,2],[59,0],[12,5],[13,7],[14,8],[15,8],[15,8],[16,8],[16,8],[17,2],[17,2],[18,7],[70,4],[70,5],[70,2],[70,1],[19,8],[72,5],[72,4],[72,4],[72,3],[72,1],[73,3],[73,0],[20,9],[20,5],[80,1],[80,0],[78,2],[78,0],[77,5],[77,0],[82,6],[82,0],[81,1],[81,0],[83,3],[83,2],[79,1],[79,0],[58,3],[58,2],[58,1],[45,3],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[84,5],[85,3],[85,3],[85,3],[85,3],[85,3],[85,3],[85,2],[85,2],[88,4],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[86,3],[86,3],[86,2],[87,1],[87,1],[87,1],[87,1],[87,1],[87,4],[87,2],[107,1],[107,0],[55,2],[55,2],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[21,2],[21,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
this.$ = [$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 31: case 58: case 59: case 103: case 104: case 105: case 106: case 107: case 108: case 136:
this.$=$$[$0];
break;
case 19:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en la Instruccion "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 20:

        this.$=new Graficarts(_$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 21:

        this.$ = new Declaracion(TipoDato.LET, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 22:

        this.$ = new Declaracion(TipoDato.CONST, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 23:
this.$ =new N_Tipo(Tipo.NUMBER, $$[$0]);
break;
case 24:
this.$ =new N_Tipo(Tipo.STRING, $$[$0]);
break;
case 25:
this.$ =new N_Tipo(Tipo.BOOLEAN, $$[$0]);
break;
case 26:
this.$ =new N_Tipo(Tipo.NULL, $$[$0]);
break;
case 27:
this.$ =new N_Tipo(Tipo.TYPE, $$[$0]);
break;
case 28:
this.$ =new N_Tipo(Tipo.ARRAY, $$[$0-1]);
break;
case 30: case 145:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error al definir tipo "+yytext,"",this._$.first_line,this._$.first_column))
break;
case 33:

        let valor=new L_Array(null,$$[$0-2]);
        this.$=[valor];
    
break;
case 34:

        this.$=[new L_Array(null,null)];
    
break;
case 35:
this.$=new N_Declaracion($$[$0], null, null)
break;
case 36:
this.$=new N_Declaracion(null, $$[$0-1], null)
break;
case 37:
this.$=new N_Declaracion(null, null, $$[$0-1])
break;
case 38:
this.$=new N_Declaracion(null, null, null)
break;
case 40:

        $$[$0-2].push($$[$0]);
        this.$=$$[$0-2];
    
break;
case 41:

        this.$=[$$[$0]];
    
break;
case 42:

        $$[$0-4].push(new N_Parametros($$[$0-2],$$[$0]));
        this.$=$$[$0-4];
    
break;
case 43:

        this.$=[new N_Parametros($$[$0-2],$$[$0])];
    
break;
case 44:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error al ingresar parametro type"+yytext,"",this._$.first_line,this._$.first_column))
break;
case 45:

        this.$ = new Asignacion($$[$0-3], $$[$0-1], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 46:

        this.$ = new AsignacionArray($$[$0-6], $$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 47:

        this.$ = new AsignacionArray($$[$0-5], $$[$0-3], null, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 48:

        this.$ = new AsignacionArray($$[$0-5], $$[$0-4], "", _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 49:

        this.$ = new AsignacionArray($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 50:

        this.$ = new pushpopcondireccion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 51:

        this.$ = new pushpopcondireccion($$[$0-6], $$[$0-5], $$[$0-3], null, _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 52:

        this.$=$$[$0-1];
    
break;
case 53:

        $$[$0-3].push($$[$0-1]);
        this.$=$$[$0-3];
    
break;
case 54:

        this.$=[$$[$0-1]];
    
break;
case 55:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error al definir direccion array "+yytext,"",this._$.first_line,this._$.first_column))
break;
case 56:

        this.$ = new Imprimir($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 57:

        this.$ = new Ifelse($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 61:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 62:

        this.$ = new Dowhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 63:

        this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 64: case 65:

        this.$ = new Forin(TipoDato.LET, $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 66: case 67:

        this.$ = new Forof(TipoDato.LET, $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 68: case 69:
this.$=new BreakContinue($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 70:

        this.$ = new Type($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 71:

        $$[$0-3].push(new N_Type($$[$0-1],$$[$0]));
        this.$=$$[$0-3];
    
break;
case 72:

        $$[$0-4].push(new N_Type($$[$0-2],$$[$0-1]));
        this.$=$$[$0-4];
    
break;
case 73:

        this.$=[new N_Type($$[$0-1],$$[$0])];
    
break;
case 74:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en los parametros type "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 75:

        this.$= new SwitchCase($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 76:

        $$[$0-4].push(new Case($$[$0-2],$$[$0]));
        this.$=$$[$0-4];
    
break;
case 77:

        $$[$0-3].push(new Case($$[$0-1],new Array()));
        this.$=$$[$0-3];
    
break;
case 78:

        this.$=[new Case($$[$0-2],$$[$0])];
    
break;
case 79:

        this.$=[new Case($$[$0-1],new Array())];
    
break;
case 80:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error al definir case "+yytext,"",this._$.first_line,this._$.first_column))
break;
case 81: case 85: case 93: case 97:

        this.$=$$[$0];
    
break;
case 83:

        this.$ = new Funcion($$[$0-7], $$[$0-5], $$[$0-3], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 84:

        this.$ = new Llamarfuncion($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 87:
this.$=$$[$0]
break;
case 89:

        this.$=[new Parametrofunc($$[$0-4],$$[$0-2],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column)];
        this.$.push($$[$0]);
    
break;
case 91:

        this.$=[new Parametrofunc($$[$0-4],$$[$0-2],$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column)]
        this.$.push($$[$0]);
    
break;
case 95: case 96:

        this.$="array";
    
break;
case 99:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 100:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 101:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en las llaves {} "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 102:
this.$=$$[$0-1];
break;
case 109:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en la expresion "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 110:

        this.$ = new Opeternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 111:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MAS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 112:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MENOS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 113:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MULT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 114:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 115:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.POT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 116:

        this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetico.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 117:

        this.$ = new Aritmetica($$[$0], null, TipoAritmetico.UMENOS, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 118:

        this.$ = new Aritmetica($$[$0], null, TipoAritmetico.UMAS, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 119:

        this.$ = new Llamarfuncionexp($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 120:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MAYORQUE, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 121:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MENORQUE, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 122:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 123:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 124:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 125:

        this.$ = new Relacional($$[$0-2], $$[$0],TipoRelacional.DIFERENCIA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 126:

        this.$ = new Logica($$[$0-2], $$[$0],TipoLogica.AND, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 127:

        this.$ = new Logica($$[$0-2], $$[$0],TipoLogica.OR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 128:

        this.$ = new Logica($$[$0], null,TipoLogica.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 129: case 130:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 131:

        this.$ = new Literal($$[$0].replace(/\"|\'/g,""), _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 132:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 133:

        this.$ = new Id($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 134:

        this.$ = new AsignacionArrayExp($$[$0-3], $$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 135:

        this.$ = new Obtenervalorarray($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 138:

        this.$ = new Asignacion($$[$0-1], null, TipoAritmetico.INC,_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 139:

        this.$ = new Asignacion($$[$0-1], null, TipoAritmetico.DEC, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 140:
this.$ = "number";
break;
case 141:
this.$ = "string";
break;
case 142:
this.$ = "boolean";
break;
case 143:
this.$ = "void";
break;
case 144:
this.$ = $$[$0];
break;
case 146:

        this.$=new Returnt(null,_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 147:

        this.$=new Returnt($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,26:$V2,27:$V3,31:$V4,55:24,56:$V5,57:$V6,61:$V7,62:$V8,63:$V9,67:$Va,68:$Vb,69:$Vc,71:$Vd,76:$Ve,111:$Vf},{1:[3]},{2:$V0,5:[1,36],6:37,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,26:$V2,27:$V3,31:$V4,55:24,56:$V5,57:$V6,61:$V7,62:$V8,63:$V9,67:$Va,68:$Vb,69:$Vc,71:$Vd,76:$Ve,111:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),{27:[1,38]},{27:[1,39]},{23:[1,40]},{2:$Vh,23:[1,44],42:$Vi,44:[1,41],51:[1,42],54:43,109:$Vj,110:$Vk},{25:[1,49]},{23:[1,50]},{23:[1,51]},{23:[1,52]},{2:$Vl,47:$Vm,58:53},{23:[1,56]},{25:[1,57]},{25:[1,58]},{27:[1,59]},{23:[1,60]},{27:[1,61]},{2:$Vn,23:$Vo,25:[1,62],27:$Vp,45:63,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{1:[2,1]},o($Vg,[2,2]),o($Vx,$Vy,{28:80,2:$Vz,32:$VA}),o($Vx,$Vy,{28:83,2:$Vz,32:$VA}),{24:[1,84]},{2:$Vn,23:$Vo,27:$Vp,45:85,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{52:[1,86],53:[1,87]},{42:$VB,44:[1,88],51:[1,89]},{2:$Vn,23:$Vo,24:$VC,27:$Vp,45:93,46:92,64:67,80:91,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},o($VD,[2,138]),o($VD,[2,139]),{2:$Vn,23:$Vo,27:$Vp,45:94,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},o($VE,[2,55]),o($Vg,[2,52]),{2:$Vn,23:$Vo,27:$Vp,45:95,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:96,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:97,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{61:[1,98]},{2:$V0,4:99,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,26:$V2,27:$V3,31:$V4,49:[1,100],55:24,56:$V5,57:$V6,61:$V7,62:$V8,63:$V9,67:$Va,68:$Vb,69:$Vc,71:$Vd,76:$Ve,111:$Vf},o($VF,[2,101]),{7:101,26:[1,102],31:[1,103]},o($Vg,[2,68]),o($Vg,[2,69]),{44:[1,104]},{2:$Vn,23:$Vo,27:$Vp,45:105,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{23:[1,106]},o($Vg,[2,146]),{25:[1,107],38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},{2:$Vn,23:$Vo,27:$Vp,45:123,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},o($VV,[2,103]),o($VV,[2,104]),o($VV,$VW),o($VV,[2,106]),o($VV,[2,107]),o($VV,[2,108]),o($VV,[2,109]),{2:$Vn,23:$Vo,27:$Vp,45:124,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:125,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:126,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},o($VV,[2,129]),o($VV,[2,130]),o($VV,[2,131]),o($VV,[2,132]),o($VV,[2,133],{107:127,54:128,2:$Vh,23:[1,129],42:$Vi,51:[2,137]}),o($VX,$VY,{29:130,41:131,42:$VZ}),{27:[1,137],33:[1,133],34:[1,134],35:[1,135],36:[1,136],37:[1,138]},o($V_,[2,30]),o($VX,$VY,{41:131,29:139,42:$VZ}),{25:[1,140]},{25:[1,141],38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},{23:[1,142]},{23:[1,143]},{2:$Vn,23:$Vo,27:$Vp,42:[1,144],45:145,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{52:[1,146],53:[1,147]},{2:$Vn,23:$Vo,27:$Vp,45:148,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{24:[1,149]},{24:[2,85],50:$V$},o($V01,[2,41],{38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU}),{38:$VG,40:$VH,43:[1,151],89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},{24:[1,152],38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},{24:[1,153],38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},{24:[1,154],38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},{23:[1,155]},{2:$V0,6:37,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,26:$V2,27:$V3,31:$V4,49:[1,156],55:24,56:$V5,57:$V6,61:$V7,62:$V8,63:$V9,67:$Va,68:$Vb,69:$Vc,71:$Vd,76:$Ve,111:$Vf},o($VF,[2,100]),{2:$Vn,23:$Vo,27:$Vp,45:158,64:157,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{27:[1,159]},{27:[1,160]},{47:[1,161]},{24:[1,162],38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},{24:[2,90],27:[1,164],77:163},o($Vg,[2,147]),{2:$Vn,23:$Vo,27:$Vp,45:165,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:166,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:167,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:168,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:169,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:170,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:171,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:172,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:173,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:174,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:175,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:176,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:177,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:178,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:$Vn,23:$Vo,27:$Vp,45:179,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{24:[1,180],38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},o($VV,[2,117]),o($VV,[2,118]),o($VV,[2,128]),{51:[1,181]},o($VV,[2,135],{42:$VB,51:[2,136]}),{2:$Vn,23:$Vo,24:$VC,27:$Vp,45:93,46:92,64:67,80:182,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{25:$V11,30:183,44:$V21},o($VX,[2,31],{42:[1,185]}),{43:[1,186]},o($V_,[2,23]),o($V_,[2,24]),o($V_,[2,25]),o($V_,[2,26]),o($V_,[2,27]),{38:[1,187]},{25:$V11,30:188,44:$V21},o($Vg,[2,20]),o($Vg,[2,45]),{2:$Vn,23:$Vo,27:$Vp,45:189,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{24:[1,190]},{43:[1,191]},{25:[1,192],38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},{23:[1,193]},{23:[1,194]},{38:$VG,40:$VH,43:[1,195],89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},{25:[1,196]},{2:$Vn,23:$Vo,27:$Vp,45:197,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},o($VE,[2,54]),{25:[1,198]},{2:$Vl,47:$Vm,58:199},{2:$Vl,47:$Vm,58:200},{2:$Vn,23:$Vo,27:$Vp,45:201,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},o($VF,[2,99]),o([38,40,89,90,91,92,93,94,95,96,97,98,99,100,101],$VW,{25:[1,202]}),{38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},o($Vx,$Vy,{28:80,2:$Vz,32:$VA,65:[1,203],66:[1,204]}),o($Vx,$Vy,{28:83,2:$Vz,32:$VA,65:[1,205],66:[1,206]}),{2:[1,209],27:[1,208],70:207},{47:[1,210]},{24:[1,211]},{32:[1,212]},{32:[1,213],38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},o($V31,[2,111],{92:$VL,93:$VM,94:$VN,95:$VO}),o($V31,[2,112],{92:$VL,93:$VM,94:$VN,95:$VO}),o($V41,[2,113],{94:$VN,95:$VO}),o($V41,[2,114],{94:$VN,95:$VO}),o($VV,[2,115]),o($VV,[2,116]),o($V51,[2,120],{90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO}),o($V51,[2,121],{90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO}),o($V51,[2,122],{90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO}),o($V51,[2,123],{90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO}),o($V51,[2,124],{38:$VG,40:$VH,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ}),o($V51,[2,125],{38:$VG,40:$VH,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ}),o([24,25,32,43,49,50,89,100,101],[2,126],{38:$VG,40:$VH,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS}),o([24,25,32,43,49,50,89,101],[2,127],{38:$VG,40:$VH,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT}),o($VV,[2,102]),{108:[1,214]},{24:[1,215]},{25:[1,216]},{2:$Vn,23:$Vo,27:$Vp,42:[1,218],45:217,47:[1,219],64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{43:[1,220]},o($Vx,[2,34]),{2:$V61,27:$V71,33:$V81,34:$V91,35:$Va1,36:$Vb1,39:221},{25:[1,228]},{24:[1,229],38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},{25:[1,230]},{25:[1,231]},o($Vg,[2,49]),{2:$Vn,23:$Vo,27:$Vp,45:232,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{24:[1,233]},o($VE,[2,53]),o($Vg,[2,84]),o($V01,[2,40],{38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU}),o($Vg,[2,56]),o($Vg,[2,60],{59:234,60:[1,235]}),o($Vg,[2,61]),{24:[1,236],38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},{27:[1,238],55:237},{27:[1,239]},{27:[1,240]},{27:[1,241]},{27:[1,242]},{25:[1,245],49:[1,243],50:[1,244]},o($Vc1,$Vy,{28:246,2:$Vz,32:$VA}),o($Vc1,[2,74]),{2:[1,249],72:247,74:[1,248]},{32:[1,251],47:[2,88],78:250},{2:$V61,27:$V71,33:$V81,34:$V91,35:$Va1,36:$Vb1,39:252},{2:$Vn,23:$Vo,27:$Vp,45:253,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},o($VV,[2,134]),o($VV,[2,119]),o($Vd1,[2,21]),{25:[2,35],38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},{2:$Vn,23:$Vo,27:$Vp,43:[1,255],45:93,46:254,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{2:[1,258],27:[1,257],48:256},o($Vx,[2,33]),{40:[1,259]},o($Ve1,[2,140]),o($Ve1,[2,141]),o($Ve1,[2,142]),o($Ve1,[2,143]),o($Ve1,[2,144]),o($Ve1,[2,145]),o($Vd1,[2,22]),{25:[1,260]},o($Vg,[2,47]),o($Vg,[2,48]),{24:[1,261],38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},{25:[1,262]},o($Vg,[2,57]),{2:$Vl,11:264,47:$Vm,57:$V6,58:263},{25:[1,265]},{24:[1,266]},{109:$Vj,110:$Vk},{24:[1,267]},{24:[1,268]},{24:[1,269]},{24:[1,270]},{25:[1,271]},{27:[1,272]},{27:[1,273]},o($Vc1,[2,73]),{49:[2,82],73:274,74:[1,275],75:[1,276]},{2:$Vn,23:$Vo,27:$Vp,45:277,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},o($Vf1,[2,80]),{47:[1,278]},{2:$V61,27:$V71,33:$V81,34:$V91,35:$Va1,36:$Vb1,39:279},o($Vg1,$Vh1,{81:280,83:281,42:$Vi1}),o([24,25,32,43,49,50,89],[2,110],{38:$VG,40:$VH,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU}),{43:[1,283],50:$V$},{25:[2,38]},{49:[1,284],50:[1,285]},{32:[1,286]},o($Vj1,[2,44]),o($V_,[2,28]),o($Vg,[2,46]),{25:[1,287]},o($Vg,[2,51]),o($Vg,[2,58]),o($Vg,[2,59]),o($Vg,[2,62]),{2:$Vl,47:$Vm,58:288},{2:$Vl,47:$Vm,58:289},{2:$Vl,47:$Vm,58:290},{2:$Vl,47:$Vm,58:291},{2:$Vl,47:$Vm,58:292},o($Vg,[2,70]),o($Vc1,$Vy,{28:293,2:$Vz,32:$VA}),{2:$Vz,25:$Vy,28:294,32:$VA},{49:[1,295]},{2:$Vn,23:$Vo,27:$Vp,45:296,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},{32:[1,297]},{32:[1,298],38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},{2:$V0,4:300,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,26:$V2,27:$V3,31:$V4,49:[2,98],55:24,56:$V5,57:$V6,61:$V7,62:$V8,63:$V9,67:$Va,68:$Vb,69:$Vc,71:$Vd,76:$Ve,79:299,111:$Vf},{47:[2,87]},{24:$Vk1,50:$Vl1,82:301},o($Vg1,[2,93],{42:[1,303]}),{43:[1,304]},{25:[2,36]},{25:[2,37]},{27:[1,305]},{2:$Vn,23:$Vo,27:$Vp,45:306,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},o($Vg,[2,50]),o($Vg,[2,63]),o($Vg,[2,64]),o($Vg,[2,66]),o($Vg,[2,65]),o($Vg,[2,67]),o($Vc1,[2,71]),{25:[1,307]},o($Vg,[2,75]),{32:[1,308],38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU},{2:$V0,4:309,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,26:$V2,27:$V3,31:$V4,55:24,56:$V5,57:$V6,61:$V7,62:$V8,63:$V9,67:$Va,68:$Vb,69:$Vc,71:$Vd,76:$Ve,111:$Vf},o($Vf1,[2,79],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,55:24,4:310,2:$V0,22:$V1,26:$V2,27:$V3,31:$V4,56:$V5,57:$V6,61:$V7,62:$V8,63:$V9,67:$Va,68:$Vb,69:$Vc,71:$Vd,76:$Ve,111:$Vf}),{49:[1,311]},{2:$V0,6:37,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,26:$V2,27:$V3,31:$V4,49:[2,97],55:24,56:$V5,57:$V6,61:$V7,62:$V8,63:$V9,67:$Va,68:$Vb,69:$Vc,71:$Vd,76:$Ve,111:$Vf},{24:[2,89]},{27:[1,312]},{43:[1,313]},o($Vm1,[2,96]),{32:[1,314]},o($Vj1,[2,43],{38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU}),o($Vc1,[2,72]),o($Vf1,[2,77],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,55:24,4:315,2:$V0,22:$V1,26:$V2,27:$V3,31:$V4,56:$V5,57:$V6,61:$V7,62:$V8,63:$V9,67:$Va,68:$Vb,69:$Vc,71:$Vd,76:$Ve,111:$Vf}),{2:$V0,6:37,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,26:$V2,27:$V3,31:$V4,49:[2,81],55:24,56:$V5,57:$V6,61:$V7,62:$V8,63:$V9,67:$Va,68:$Vb,69:$Vc,71:$Vd,76:$Ve,111:$Vf},o($Vf1,[2,78],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,55:24,6:37,2:$V0,22:$V1,26:$V2,27:$V3,31:$V4,56:$V5,57:$V6,61:$V7,62:$V8,63:$V9,67:$Va,68:$Vb,69:$Vc,71:$Vd,76:$Ve,111:$Vf}),o($Vg,[2,83]),{32:[1,316]},o($Vm1,[2,95]),{2:$Vn,23:$Vo,27:$Vp,45:317,64:67,84:65,85:66,86:68,87:69,88:70,90:$Vq,91:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw},o($Vf1,[2,76],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,55:24,6:37,2:$V0,22:$V1,26:$V2,27:$V3,31:$V4,56:$V5,57:$V6,61:$V7,62:$V8,63:$V9,67:$Va,68:$Vb,69:$Vc,71:$Vd,76:$Ve,111:$Vf}),{2:$V61,27:$V71,33:$V81,34:$V91,35:$Va1,36:$Vb1,39:318},o($Vj1,[2,42],{38:$VG,40:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU}),o($Vg1,$Vh1,{83:281,81:319,42:$Vi1}),{24:$Vk1,50:$Vl1,82:320},{24:[2,91]}],
defaultActions: {36:[2,1],255:[2,38],279:[2,87],283:[2,36],284:[2,37],301:[2,89],320:[2,91]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const CL_Error = require('../build/Errores/L_Error');
    const CN_Error = require('../build/Errores/N_Error');
    const {TipoDato, Tipo, TipoAritmetico, TipoRelacional, TipoLogica} = require('../build/Abstracto/Retorno');
    const {Literal} = require('../build/Expresiones/Literal');
    const {Aritmetica} = require('../build/Expresiones/Aritmetica');
    const {Relacional} = require('../build/Expresiones/Relacional');
    const {Logica} = require('../build/Expresiones/Logica');
    const {Opeternario} = require('../build/Expresiones/Opeternario');
    const {Llamarfuncionexp} = require('../build/Expresiones/Llamarfuncionexp');
    const {Imprimir} = require('../build/Instrucciones/Imprimir');
    const {Graficarts} = require('../build/Instrucciones/Graficarts');
    const {Ifelse} = require('../build/Instrucciones/Ifelse');
    const {While} = require('../build/Instrucciones/While');
    const {For} = require('../build/Instrucciones/For/For');
    const {Forin} = require('../build/Instrucciones/For/Forin');
    const {Forof} = require('../build/Instrucciones/For/Forof');
    const {Dowhile} = require('../build/Instrucciones/Dowhile');
    const {Declaracion, N_Declaracion, N_Parametros} = require('../build/Instrucciones/Declaracion');
    const {Asignacion} = require('../build/Instrucciones/Asignacion');
    const {Statement} = require('../build/Instrucciones/Statement');
    const {Id} = require('../build/Expresiones/Id');
    const {Funcion, Parametrofunc} = require('../build/Instrucciones/Funcion');
    const {Llamarfuncion} = require('../build/Instrucciones/Llamarfuncion');
    const {Type} = require('../build/Instrucciones/Type');
    const {N_Type} = require('../build/Otros/L_Types');
    const {N_Tipo} = require('../build/Otros/N_Tipo');
    const {L_Array} = require('../build/Instrucciones/Array');
    const {AsignacionArray, AsignacionArrayExp, Obtenervalorarray, pushpopcondireccion} = require('../build/Instrucciones/AsignacionArray');
    const {SwitchCase, Case} = require('../build/Instrucciones/SwitchCase');
    const {BreakContinue} = require('../build/Instrucciones/BreakContinue');
    const {Returnt} = require('../build/Instrucciones/Returnt');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario de una linea
break;
case 2:/*Comentario multilinea*/
break;
case 3:return 26
break;
case 4:return 31
break;
case 5:return 34
break;
case 6:return 33
break;
case 7:return 35
break;
case 8:return 36
break;
case 9:return 57
break;
case 10:return 60
break;
case 11:return 71
break;
case 12:return 74
break;
case 13:return 75
break;
case 14:return 61
break;
case 15:return 62
break;
case 16:return 63
break;
case 17:return 68
break;
case 18:return 111
break;
case 19:return 67
break;
case 20:return 76
break;
case 21:return 56
break;
case 22:return 22
break;
case 23:return 69
break;
case 24:return 37
break;
case 25:return 52
break;
case 26:return 53
break;
case 27:return 108
break;
case 28:return 65
break;
case 29:return 66
break;
case 30:return 98
break;
case 31:return 99
break;
case 32:return 96
break;
case 33:return 40
break;
case 34:return 97
break;
case 35:return 38 
break;
case 36:return 100
break;
case 37:return 101
break;
case 38:return 102
break;
case 39:return 109
break;
case 40:return 110
break;
case 41:return 47
break;
case 42:return 49
break;
case 43:return 25
break;
case 44:return 44
break;
case 45:return 23
break;
case 46:return 24
break;
case 47:return 50
break;
case 48:return 32
break;
case 49:return 51
break;
case 50:return 42
break;
case 51:return 43
break;
case 52:return 89
break;
case 53:return 106
break;
case 54:return 104
break;
case 55:return 103
break;
case 56:return 105
break;
case 57:return 27;
break;
case 58:return 94
break;
case 59:return 90
break;
case 60:return 91
break;
case 61:return 92
break;
case 62:return 93
break;
case 63:return 95
break;
case 64: /*se ignoran*/ 
break;
case 65:  return 5;   
break;
case 66:CL_Error.L_Errores.push(new CN_Error.N_Error("Lexico",yy_.yytext,"",yy_.yylineno,yy_.yylloc.first_column));
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:function\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:true|false\b)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[\"|\']([^\"\n]|(\\"))*[\"|\'])/,/^(?:([a-zA-Z])[a-zA-Z0-9_ñÑ]*)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}